(()=>{var t={666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var i=e&&e.prototype instanceof y?e:y,o=Object.create(i.prototype),a=new N(n||[]);return o._invoke=function(t,e,r){var n=u;return function(i,o){if(n===p)throw new Error("Generator is already running");if(n===m){if("throw"===i)throw o;return O()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=C(a,r);if(s){if(s===f)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===u)throw n=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=d(t,e,r);if("normal"===c.type){if(n=r.done?m:h,c.arg===f)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=m,r.method="throw",r.arg=c.arg)}}}(t,r,a),o}function d(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var u="suspendedStart",h="suspendedYield",p="executing",m="completed",f={};function y(){}function v(){}function w(){}var g={};c(g,o,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(A([])));E&&E!==r&&n.call(E,o)&&(g=E);var S=w.prototype=y.prototype=Object.create(g);function L(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){function r(i,o,a,s){var c=d(t[i],t,o);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==typeof u&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(u).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,i){r(t,n,e,i)}))}return i=i?i.then(o,o):o()}}function C(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method))return f;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var i=d(n,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,f;var o=i.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,f):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,f)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function A(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function r(){for(;++i<t.length;)if(n.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:O}}function O(){return{value:e,done:!0}}return v.prototype=w,c(S,"constructor",w),c(w,"constructor",v),v.displayName=c(w,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,c(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},L(b.prototype),c(b.prototype,a,(function(){return this})),t.AsyncIterator=b,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var a=new b(l(e,r,n,i),o);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},L(S),c(S,s,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(n,i){return s.type="throw",s.arg=t,r.next=n,i&&(r.method="next",r.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;P(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:A(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),f}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}(()=>{"use strict";function t(t,e,r){const n=document.createElement("div");n.classList.add("board-wrap");const i=document.createElement("div");i.classList.add("board");const o=document.createElement("h2");return o.textContent=`${t.name}'s fleet`,n.append(o,i),{getBoardDiv:()=>n,render:n=>{n.forEach(((n,o)=>{n.forEach(((n,a)=>{const s=function(t,e,r,n,i,o){const a=document.createElement("div");return a.classList.add("cell"),a.dataset.x=t,a.dataset.y=e,i&&a.addEventListener("click",(()=>i({x:a.dataset.x,y:a.dataset.y}))),o&&a.addEventListener("mouseenter",(()=>o({x:a.dataset.x,y:a.dataset.y}))),!1!==r.isShip&&"player"===n.type&&a.classList.add("ship"),!0===r.isPreview&&a.classList.add("preview"),!1===r.isShip&&!0===r.isHit&&(a.textContent="⬤"),!1!==r.isShip&&!0===r.isHit&&(a.textContent="⬤",a.classList.add("hit"),r.isShip.isSunk()&&a.classList.add("sunk")),a}(a,o,n,t,e,r);i.appendChild(s)}))}))},clean:()=>{i.textContent=""},setName:t=>(t=>{o.textContent=`${t}'s fleet`})(t)}}class e{constructor(){this.wrapper=document.createElement("div"),this.title=document.createElement("h2"),this.initialize()}initialize(){this.title.textContent="Destroyed ships",this.wrapper.classList.add("destroyed-ships-wrapper"),this.wrapper.appendChild(this.title)}appendShip(t){const e=document.createElement("div");e.classList.add("destroyed-ship");for(let r=0;r<t.getLength();r+=1){const t=document.createElement("div");t.classList.add("cell"),e.appendChild(t)}this.wrapper.appendChild(e)}getElement(){return this.wrapper}}const n=new class{constructor(){this.modal=document.querySelector(".modal"),this.content=document.createElement("div"),this.wrapper=document.createElement("div"),this.wrapper.classList.add("modal-box"),this.wrapper.addEventListener("click",(t=>t.stopPropagation())),this.wrapper.appendChild(this.content),this.modal.appendChild(this.wrapper)}addCloseIcon(){this.closeIcon=document.createElement("div"),this.closeIcon.classList.add("modal-close"),this.closeIcon.innerHTML+='<svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512"><title>Close</title><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M368 368L144 144M368 144L144 368"/></svg>',this.wrapper.appendChild(this.closeIcon)}showOwnPromise(t){this.content.appendChild(t),this.modal.classList.add("visible")}show(t){return new Promise((e=>{this.addCloseIcon(),this.content.appendChild(t),this.modal.classList.add("visible"),this.closeIcon.addEventListener("click",(()=>{e(),this.cleanModal()}))}))}cleanModal(){this.modal.classList.remove("visible"),this.content.innerText=""}},i=new class{constructor(){this.modal=n}async show(){return new Promise((t=>{let e;const r=document.createElement("div"),n=document.createElement("h2");n.textContent="Enter your name";const i=document.createElement("input");i.setAttribute("autofocus","");const o=document.createElement("span");o.textContent="Please use a name between 2 and 15 characters";const a=r=>{r.preventDefault(),i.checkValidity()?(o.style.display="none",i.classList.remove("invalid-input"),this.modal.cleanModal(),t(e)):(i.classList.add("invalid-input"),o.style.display="block")};i.placeholder="Your name",i.type="text",i.maxLength=15,i.minLength=2,i.addEventListener("input",(t=>{e=t.target.value})),i.addEventListener("keyup",(t=>{"Enter"===t.key&&a(t)}));const s=document.createElement("button");s.textContent="Submit",s.addEventListener("click",(t=>{a(t)}));const c=document.createElement("div");c.append(i,s),r.append(n,c,o),this.modal.showOwnPromise(r)}))}},o=[5,4,3,3,2],a=10;const s=new class{constructor(){this.modal=n}async announceWinner(t){const e=document.createElement("h2");e.textContent=`${t} has won the game!`,await this.modal.show(e)}};function c(r,n,a,c,l,d,u){let h=!1;const p=document.querySelector(".gamearea");p.textContent="";const m=new e,f=new e,y=function(t,e){let r=!1;const n=document.createElement("div");n.id="ship-picker",n.classList.add("board-wrap");const i=document.createElement("div");i.classList.add("shippicker");const a=document.createElement("div");a.classList.add("arrow-left");const s=document.createElement("h2");s.textContent="Place your fleet";const c=document.createElement("div");c.classList.add("current-ship-wrap");const l=document.createElement("button");l.textContent="Rotate ship",l.addEventListener("click",(()=>{r=!r,u(),t()}));const d=()=>{const t=o[e()],n=document.createElement("div");r&&n.classList.add("is-vertical"),n.classList.add("destroyed-ship","current-ship");for(let e=0;e<t;e+=1){const t=document.createElement("div");t.classList.add("cell"),n.appendChild(t)}return n},u=()=>{c.textContent="",n.textContent="",i.textContent="";const t=d();c.appendChild(t),i.append(a,s,l,c),n.append(i)};return{getBoardWrap:()=>n,displayCurrentShip:d,render:u}}(d,u),v=document.createElement("div");v.classList.add("boards-wrapper");const w=t({name:"Player",type:"player"},c,l),g=t({name:"Enemy",type:"enemy"},a);return(()=>{const t=m.getElement(),e=f.getElement();v.appendChild(w.getBoardDiv()),v.appendChild(y.getBoardWrap()),p.append(t,v,e),y.displayCurrentShip()})(),{renderBoards:()=>{w.clean(),g.clean(),w.render(r.getArray()),g.render(n.getArray()),y.render()},appendDestroyedShip:(t,e)=>{switch(e){case"player":m.appendShip(t);break;case"enemy":f.appendShip(t)}},handleWin:async t=>{h||(h=!0,await s.announceWinner(t),h=!1)},showNameModal:async()=>{let t;return h||(h=!0,t=await i.show(),h=!1),t||"Player"},switchToEnemyBoard:()=>{document.getElementById("ship-picker").remove(),v.appendChild(g.getBoardDiv())},setPlayerName:t=>w.setName(t)}}r(666);class l extends Error{constructor(t){super(t),this.name="OverlapError"}}class d extends Error{constructor(t){super(t),this.name="OutOfBoundsError"}}function u(t){let e=t;const r=function(){const t=[],e=function(t,e){const r=[];return(()=>{for(let n=0;n<t;n+=1)r.push(new Array(t).fill(e))})(),{setSingleCellObject:(e,n,i)=>{if(e<t&&n<t)return r[n][e]=i,!0;throw new Error("Coordinates out of bounds")},getArray:()=>r,getSingleValue:(e,n)=>{if(e<t&&n<t)return r[n][e];throw new Error("Coordinates out of bounds")},writeSingleCellKeyPair:(e,n,i,o)=>{if(e<t&&n<t){const t={...r[n][e]};t[i]=o,r[n][e]=t}}}}(a,{isShip:!1,isHit:!1,isPreview:!1});let r=[];const n=(t,r,n,i)=>{const o=[];for(let s=0;s<i;s+=1){let i,c;if(n?(i=r+s,c=t):(i=r,c=t+s),i>=a||c>=a)throw new d("Ship doesn't fit the gameboard");if(!1!==e.getSingleValue(c,i).isShip)throw new l("Ship overlaps already existing ship");o.push({xAxis:c,yAxis:i})}return o},i=async()=>{await r.forEach((t=>{e.writeSingleCellKeyPair(t.xAxis,t.yAxis,"isPreview",!1)}))},o=(r,i,o,a)=>{const s=function(t){let e=0;return{hit:()=>(e+=1,!0),isSunk:()=>e===t,getLength:()=>t}}(a);return n(r,i,o,a).forEach((t=>{e.setSingleCellObject(t.xAxis,t.yAxis,{isShip:s,isHit:!1})})),t.push(s),s};return{placeShip:o,receiveAttack:(t,r)=>{const n=e.getSingleValue(t,r);let i={};if(!0===n.isHit)throw new Error("Cannot hit the same place twice");return!1!==n.isShip&&!1===n.isHit&&(n.isShip.hit(),i={isShip:n.isShip,isHit:!0,isSunk:n.isShip.isSunk()}),!1===n.isShip&&!1===n.isHit&&(i={isShip:!1,isHit:!0}),e.setSingleCellObject(t,r,i),i},areAllShipsSunk:()=>t.every((t=>t.isSunk())),getArray:()=>e.getArray(),autoPlaceShips:t=>(t.forEach((t=>{const e=()=>{const e=Math.random()<.5,{x:r,y:n}=((t,e)=>{let r,n;return t?(n=Math.floor(Math.random()*(a-e)),r=Math.floor(Math.random()*a)):(r=Math.floor(Math.random()*(a-e)),n=Math.floor(Math.random()*a)),{x:r,y:n}})(e,t);try{o(r,n,e,t)}catch(t){return"error"}};let r,n=100;do{if(r=e(),n-=1,n<=0)throw new Error("Couldn't autoplace your ships (max retries exceeded)")}while("error"===r)})),!0),getSunkShips:()=>t.filter((t=>t.isSunk())),previewShipPlacement:(t,o,a,s)=>{i();const c=n(t,o,a,s);r=c,c.forEach((t=>{e.writeSingleCellKeyPair(t.xAxis,t.yAxis,"isPreview",!0)}))},cleanPreviousShipPreview:i}}(),n=[],i=(t,e,r)=>{const i=r.getBoard();return n.push({x:t,y:e}),i.receiveAttack(t,e)},o=t=>{if(n>=100)return;const e=()=>Math.floor(10*Math.random()),r=()=>{let t={x:e(),y:e()};return(t=>n.some((e=>e.x===t.x&&e.y===t.y)))(t)&&(t=r()),t},o=r();return i(o.x,o.y,t)};return{getName:()=>e,setName:t=>{e=t},getBoard:()=>r,attack:i,attackRandomPosition:o,delayedRandomAttack:async(t,e)=>{var r;return await(r=t,new Promise((t=>setTimeout(t,r)))),o(e)}}}async function h(t){return new Promise((e=>{let r=0;const n=u("placeholder"),i=u("Computer"),a=n.getBoard(),s=i.getBoard(),l=c(a,s,(function(t){d&&y(t)}),(async function(t){if(p){if(r<o.length)try{a.placeShip(Number(t.x),Number(t.y),m,o[r]),r+=1}catch(t){"OutOfBoundsError"===t.name||t.name}r===o.length&&(p=!1,r=0,d=!0,await a.cleanPreviousShipPreview(),l.switchToEnemyBoard(),l.renderBoards())}}),(function(t){if(p&&(v?.x!==t.x||v?.y!==t.y))try{a.previewShipPlacement(Number(t.x),Number(t.y),m,o[r]),l.renderBoards(),v={...t}}catch(t){}}),(function(){m=!m}),(function(){return r}));let d=!1,h="player",p=!0,m=!1;async function f(){!0===a.areAllShipsSunk()&&(await l.handleWin(i.getName()),e(n.getName())),!0===s.areAllShipsSunk()&&(await l.handleWin(n.getName()),e(n.getName()))}t?(n.setName(t),l.setPlayerName(t)):async function(){const t=await async function(){return await l.showNameModal()}();n.setName(t),l.setPlayerName(t)}();const y=async t=>{try{d&&"player"===h&&(h=await(async t=>{const e=await n.attack(t.x,t.y,i);return f(),l.renderBoards(),!0===e?.isSunk&&l.appendDestroyedShip(e.isShip,"enemy"),!1!==e?.isShip?"player":"computer"})(t)),"computer"===h&&(d=!1,h=await(async()=>{const t=await i.delayedRandomAttack(250,n);return f(),l.renderBoards(),!0===t?.isSunk&&l.appendDestroyedShip(t.isShip,"player"),!1!==t?.isShip?"computer":"player"})(),"computer"===h&&y(""),d=!0)}catch(t){}};let v;s.autoPlaceShips(o),l.renderBoards()}))}!async function(){let t;for(;;)t=await h(t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUJwRixFQUFPcUQsT0FBT2xCLEVBQUszSCxFQUFHMkgsRUFBSzdILEVBQUdrSyxHQU12RCxPQUxBUyxJQUNBUixFQUFlNUUsZ0JBQ1ksSUFBdkJ1RixHQUFZcEssUUFDZHlKLEVBQWUxRSxvQkFBb0JxRixFQUFXdkssT0FBUSxVQUU3QixJQUF2QnVLLEdBQVl2SyxPQUNQLFNBRUYsWUFxQmdCd0ssQ0FBV2xELElBRWIsYUFBZjZDLElBQ0ZOLEdBQTRCLEVBQzVCTSxPQXRCZTlOLFdBQ25CLE1BQU1vTyxRQUF3QmQsRUFBTVIsb0JUMUVsQixJUzBFZ0RoRSxHQVFsRSxPQVBBaUYsSUFDQVIsRUFBZTVFLGdCQUVpQixJQUE1QnlGLEdBQWlCdEssUUFDbkJ5SixFQUFlMUUsb0JBQW9CdUYsRUFBZ0J6SyxPQUFRLFdBRzdCLElBQTVCeUssR0FBaUJ6SyxPQUNaLFdBRUYsVUFVZ0IwSyxHQUNBLGFBQWZQLEdBQ0ZMLEVBQVksSUFFZEQsR0FBNEIsR0FFOUIsTUFBTzNQLE1BS1gsSUFBSWdRLEVBc0RKOUcsRUFBV3FFLGVBQWUxRSxHQUMxQjZHLEVBQWU1RSxtQkFJSjNJLGlCQUNiLElBQUlvTixFQUNKLE9BR0VBLFFBQXFCRCxFQUFTQyxHQzNLbENrQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9Db21wb25lbnRzL0JvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvQ2VsbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9Db21wb25lbnRzL0Rlc3Ryb3llZFNoaXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vQ29tcG9uZW50cy9DbG9zZUljb24uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vQ29tcG9uZW50cy9OYW1lSW5wdXQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9DT05TVEFOVFMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vQ29tcG9uZW50cy9XaW5uZXJBbm91bmNlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9ET01tYW5hZ2VyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvU2hpcFBpY2tlckJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9HYW1lYm9hcmQvQ3VzdG9tRXJyb3JzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9QbGF5ZXIvUGxheWVyRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvR2FtZWJvYXJkL0dhbWVib2FyZEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL0hlbHBlcnMvQXJyYXkyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvU2hpcC9TaGlwRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiaW1wb3J0IENlbGwgZnJvbSAnLi9DZWxsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm9hcmQoYm9hcmREYXRhLCBoYW5kbGVDZWxsQ2xpY2ssIGhhbmRsZUNlbGxIb3Zlcikge1xuICBjb25zdCBib2FyZFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm9hcmRXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2JvYXJkLXdyYXAnKTtcbiAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm9hcmQuY2xhc3NMaXN0LmFkZCgnYm9hcmQnKTtcbiAgY29uc3QgYm9hcmRIZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgYm9hcmRIZWFkaW5nLnRleHRDb250ZW50ID0gYCR7Ym9hcmREYXRhLm5hbWV9J3MgZmxlZXRgO1xuXG4gIGNvbnN0IGNoYW5nZUhlYWRpbmdOYW1lID0gKG5hbWUpID0+IHtcbiAgICBib2FyZEhlYWRpbmcudGV4dENvbnRlbnQgPSBgJHtuYW1lfSdzIGZsZWV0YDtcbiAgfTtcblxuICBjb25zdCBzZXROYW1lID0gKG5hbWUpID0+IGNoYW5nZUhlYWRpbmdOYW1lKG5hbWUpO1xuXG4gIGNvbnN0IGNsZWFuID0gKCkgPT4ge1xuICAgIGJvYXJkLnRleHRDb250ZW50ID0gJyc7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyID0gKGFycmF5KSA9PiB7XG4gICAgYXJyYXkuZm9yRWFjaCgocm93RGF0YSwgeSkgPT4ge1xuICAgICAgcm93RGF0YS5mb3JFYWNoKChjZWxsRGF0YSwgeCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50Q2VsbCA9IENlbGwoeCwgeSwgY2VsbERhdGEsIGJvYXJkRGF0YSwgaGFuZGxlQ2VsbENsaWNrLCBoYW5kbGVDZWxsSG92ZXIpO1xuICAgICAgICBib2FyZC5hcHBlbmRDaGlsZChjdXJyZW50Q2VsbCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBib2FyZFdyYXBwZXIuYXBwZW5kKGJvYXJkSGVhZGluZywgYm9hcmQpO1xuXG4gIGNvbnN0IGdldEJvYXJkRGl2ID0gKCkgPT4gYm9hcmRXcmFwcGVyO1xuXG4gIHJldHVybiB7IGdldEJvYXJkRGl2LCByZW5kZXIsIGNsZWFuLCBzZXROYW1lIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjZWxsKHgsIHksIGNlbGxEYXRhLCBib2FyZERhdGEsIGhhbmRsZUNlbGxDbGljaywgaGFuZGxlQ2VsbEhvdmVyKSB7XG4gIGNvbnN0IGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjZWxsRWwuY2xhc3NMaXN0LmFkZCgnY2VsbCcpO1xuICBjZWxsRWwuZGF0YXNldC54ID0geDtcbiAgY2VsbEVsLmRhdGFzZXQueSA9IHk7XG5cbiAgaWYgKGhhbmRsZUNlbGxDbGljaykge1xuICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGhhbmRsZUNlbGxDbGljayh7IHg6IGNlbGxFbC5kYXRhc2V0LngsIHk6IGNlbGxFbC5kYXRhc2V0LnkgfSkpO1xuICB9XG5cbiAgaWYgKGhhbmRsZUNlbGxIb3Zlcikge1xuICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gaGFuZGxlQ2VsbEhvdmVyKHsgeDogY2VsbEVsLmRhdGFzZXQueCwgeTogY2VsbEVsLmRhdGFzZXQueSB9KSk7XG4gIH1cblxuICBpZiAoY2VsbERhdGEuaXNTaGlwICE9PSBmYWxzZSAmJiBib2FyZERhdGEudHlwZSA9PT0gJ3BsYXllcicpIHtcbiAgICBjZWxsRWwuY2xhc3NMaXN0LmFkZCgnc2hpcCcpO1xuICB9XG5cbiAgaWYgKGNlbGxEYXRhLmlzUHJldmlldyA9PT0gdHJ1ZSkge1xuICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKCdwcmV2aWV3Jyk7XG4gIH1cblxuICBpZiAoY2VsbERhdGEuaXNTaGlwID09PSBmYWxzZSAmJiBjZWxsRGF0YS5pc0hpdCA9PT0gdHJ1ZSkge1xuICAgIGNlbGxFbC50ZXh0Q29udGVudCA9ICfirKQnO1xuICB9XG4gIGlmIChjZWxsRGF0YS5pc1NoaXAgIT09IGZhbHNlICYmIGNlbGxEYXRhLmlzSGl0ID09PSB0cnVlKSB7XG4gICAgY2VsbEVsLnRleHRDb250ZW50ID0gJ+KspCc7XG4gICAgY2VsbEVsLmNsYXNzTGlzdC5hZGQoJ2hpdCcpO1xuXG4gICAgaWYgKGNlbGxEYXRhLmlzU2hpcC5pc1N1bmsoKSkge1xuICAgICAgY2VsbEVsLmNsYXNzTGlzdC5hZGQoJ3N1bmsnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2VsbEVsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVzdHJveWVkU2hpcHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLndyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9ICdEZXN0cm95ZWQgc2hpcHMnO1xuICAgIHRoaXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKCdkZXN0cm95ZWQtc2hpcHMtd3JhcHBlcicpO1xuICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlKTtcbiAgfVxuXG4gIGFwcGVuZFNoaXAoc2hpcCkge1xuICAgIGNvbnN0IHNoaXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGVzdHJveWVkLXNoaXAnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5nZXRMZW5ndGgoKTsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgICAgIHNoaXBFbGVtZW50LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgIH1cbiAgICB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQoc2hpcEVsZW1lbnQpO1xuICB9XG5cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy53cmFwcGVyO1xuICB9XG59XG4iLCJpbXBvcnQgY2xvc2VJY29uIGZyb20gJy4vQ2xvc2VJY29uJztcbmltcG9ydCAnLi9zdHlsZXMvTW9kYWwuY3NzJztcblxuY2xhc3MgTW9kYWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJyk7XG4gICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB0aGlzLndyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCgnbW9kYWwtYm94Jyk7XG4gICAgdGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCkpO1xuXG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudCk7XG5cbiAgICB0aGlzLm1vZGFsLmFwcGVuZENoaWxkKHRoaXMud3JhcHBlcik7XG4gIH1cblxuICBhZGRDbG9zZUljb24oKSB7XG4gICAgdGhpcy5jbG9zZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmNsb3NlSWNvbi5jbGFzc0xpc3QuYWRkKCdtb2RhbC1jbG9zZScpO1xuICAgIHRoaXMuY2xvc2VJY29uLmlubmVySFRNTCArPSBjbG9zZUljb247XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY2xvc2VJY29uKTtcbiAgfVxuXG4gIHNob3dPd25Qcm9taXNlKGVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG4gIH1cblxuICBzaG93KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuYWRkQ2xvc2VJY29uKCk7XG4gICAgICB0aGlzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgICAgIHRoaXMuY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIHRoaXMuY2xlYW5Nb2RhbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhbk1vZGFsKCkge1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xuICAgIHRoaXMuY29udGVudC5pbm5lclRleHQgPSAnJztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgTW9kYWwoKTtcbiIsImNvbnN0IGNsb3NlSWNvbiA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBjbGFzcz1cImlvbmljb25cIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj48dGl0bGU+Q2xvc2U8L3RpdGxlPjxwYXRoIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMzJcIiBkPVwiTTM2OCAzNjhMMTQ0IDE0NE0zNjggMTQ0TDE0NCAzNjhcIi8+PC9zdmc+JztcblxuZXhwb3J0IGRlZmF1bHQgY2xvc2VJY29uO1xuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4vTW9kYWwnO1xuXG5jbGFzcyBFbnRlck5hbWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vZGFsID0gTW9kYWw7XG4gIH1cblxuICBhc3luYyBzaG93KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgbGV0IG5hbWU7XG4gICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgICB0aXRsZS50ZXh0Q29udGVudCA9ICdFbnRlciB5b3VyIG5hbWUnO1xuICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvZm9jdXMnLCAnJyk7XG4gICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ1BsZWFzZSB1c2UgYSBuYW1lIGJldHdlZW4gMiBhbmQgMTUgY2hhcmFjdGVycyc7XG5cbiAgICAgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoaW5wdXQuY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgICAgbGFiZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbGlkLWlucHV0Jyk7XG4gICAgICAgICAgdGhpcy5tb2RhbC5jbGVhbk1vZGFsKCk7XG4gICAgICAgICAgcmVzb2x2ZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkLWlucHV0Jyk7XG4gICAgICAgICAgbGFiZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gJ1lvdXIgbmFtZSc7XG4gICAgICBpbnB1dC50eXBlID0gJ3RleHQnO1xuICAgICAgaW5wdXQubWF4TGVuZ3RoID0gMTU7XG4gICAgICBpbnB1dC5taW5MZW5ndGggPSAyO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgbmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgIH0pO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgIGhhbmRsZVN1Ym1pdChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdTdWJtaXQnO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGhhbmRsZVN1Ym1pdChldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaW5wdXRCdXR0b25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBpbnB1dEJ1dHRvbldyYXBwZXIuYXBwZW5kKGlucHV0LCBidXR0b24pO1xuICAgICAgd3JhcHBlci5hcHBlbmQodGl0bGUsIGlucHV0QnV0dG9uV3JhcHBlciwgbGFiZWwpO1xuICAgICAgdGhpcy5tb2RhbC5zaG93T3duUHJvbWlzZSh3cmFwcGVyKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgRW50ZXJOYW1lKCk7XG4iLCIvLyBHYW1lIHdpbGwgYmUgcGxheWVkIHdpdGggc2hpcHMgb2YgdGhlc2UgbGVuZ3Roc1xuZXhwb3J0IGNvbnN0IFNISVBfTEVOR1RIUyA9IFs1LCA0LCAzLCAzLCAyXTtcblxuLy8gQUkgbW92ZSBkZWxheSBpbiBtaWxsaXNlY29uZHNcbmV4cG9ydCBjb25zdCBBSV9ERUxBWSA9IDI1MDtcblxuLy8gdGhlIHNpemUgb2YgdGhlIGdhbWVib2FyZFxuZXhwb3J0IGNvbnN0IEVER0VfU0laRSA9IDEwO1xuIiwiaW1wb3J0IE1vZGFsIGZyb20gJy4vTW9kYWwnO1xuXG5jbGFzcyBXaW5uZXJBbm91bmNlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubW9kYWwgPSBNb2RhbDtcbiAgfVxuXG4gIGFzeW5jIGFubm91bmNlV2lubmVyKG5hbWUpIHtcbiAgICBjb25zdCBhbm5vdW5jZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIGFubm91bmNlbWVudC50ZXh0Q29udGVudCA9IGAke25hbWV9IGhhcyB3b24gdGhlIGdhbWUhYDtcbiAgICBhd2FpdCB0aGlzLm1vZGFsLnNob3coYW5ub3VuY2VtZW50KTtcbiAgfVxufVxuXG5jb25zdCBXaW5uZXJNb2RhbCA9IG5ldyBXaW5uZXJBbm91bmNlbWVudCgpO1xuZXhwb3J0IGRlZmF1bHQgV2lubmVyTW9kYWw7XG4iLCJpbXBvcnQgQm9hcmQgZnJvbSAnLi9Db21wb25lbnRzL0JvYXJkJztcbmltcG9ydCBEZXN0cm95ZWRTaGlwcyBmcm9tICcuL0NvbXBvbmVudHMvRGVzdHJveWVkU2hpcHMnO1xuaW1wb3J0IEVudGVyTmFtZSBmcm9tICcuL0NvbXBvbmVudHMvTmFtZUlucHV0JztcbmltcG9ydCBTaGlwUGlja2VyQm9hcmQgZnJvbSAnLi9Db21wb25lbnRzL1NoaXBQaWNrZXJCb2FyZCc7XG5pbXBvcnQgV2lubmVyTW9kYWwgZnJvbSAnLi9Db21wb25lbnRzL1dpbm5lckFub3VuY2VtZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRE9NbWFuYWdlcihcbiAgcGxheWVyQm9hcmQsXG4gIGVuZW15Qm9hcmQsXG4gIGhhbmRsZUVuZW15Q2VsbENsaWNrLFxuICBoYW5kbGVQbGF5ZXJDZWxsQ2xpY2ssXG4gIGhhbmRsZVBsYXllckNlbGxIb3ZlcixcbiAgcm90YXRlSGFuZGxlcixcbiAgZ2V0Q3VycmVudFNoaXBJRCxcbikge1xuICBsZXQgc2hvd2luZ01vZGFsID0gZmFsc2U7XG4gIGNvbnN0IGdhbWVhcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWVhcmVhJyk7XG4gIGdhbWVhcmVhLnRleHRDb250ZW50ID0gJyc7XG4gIGNvbnN0IHBsYXllckRlc3Ryb3llZFNoaXBzRE9NID0gbmV3IERlc3Ryb3llZFNoaXBzKCk7XG4gIGNvbnN0IGVuZW15RGVzdHJveWVkU2hpcHNET00gPSBuZXcgRGVzdHJveWVkU2hpcHMoKTtcbiAgY29uc3Qgc2hpcFBpY2tlckJvYXJkID0gU2hpcFBpY2tlckJvYXJkKHJvdGF0ZUhhbmRsZXIsIGdldEN1cnJlbnRTaGlwSUQpO1xuICBjb25zdCBib2FyZHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJvYXJkc1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnYm9hcmRzLXdyYXBwZXInKTtcbiAgY29uc3QgcGxheWVyQm9hcmRET00gPSBCb2FyZChcbiAgICB7XG4gICAgICBuYW1lOiAnUGxheWVyJyxcbiAgICAgIHR5cGU6ICdwbGF5ZXInLFxuICAgIH0sXG4gICAgaGFuZGxlUGxheWVyQ2VsbENsaWNrLFxuICAgIGhhbmRsZVBsYXllckNlbGxIb3ZlcixcbiAgKTtcbiAgY29uc3QgZW5lbXlCb2FyZERPTSA9IEJvYXJkKFxuICAgIHtcbiAgICAgIG5hbWU6ICdFbmVteScsXG4gICAgICB0eXBlOiAnZW5lbXknLFxuICAgIH0sXG4gICAgaGFuZGxlRW5lbXlDZWxsQ2xpY2ssXG4gICk7XG5cbiAgY29uc3Qgc2V0UGxheWVyTmFtZSA9IChuYW1lKSA9PiBwbGF5ZXJCb2FyZERPTS5zZXROYW1lKG5hbWUpO1xuXG4gIGNvbnN0IGluaXRpYWxpemUgPSAoKSA9PiB7XG4gICAgY29uc3QgcGxheWVyRGVzdHJveWVkU2hpcHMgPSAocGxheWVyRGVzdHJveWVkU2hpcHNET00uZ2V0RWxlbWVudCgpKTtcbiAgICBjb25zdCBlbmVteURlc3Ryb3llZFNoaXBzID0gKGVuZW15RGVzdHJveWVkU2hpcHNET00uZ2V0RWxlbWVudCgpKTtcblxuICAgIGJvYXJkc1dyYXBwZXIuYXBwZW5kQ2hpbGQocGxheWVyQm9hcmRET00uZ2V0Qm9hcmREaXYoKSk7XG4gICAgYm9hcmRzV3JhcHBlci5hcHBlbmRDaGlsZChzaGlwUGlja2VyQm9hcmQuZ2V0Qm9hcmRXcmFwKCkpO1xuICAgIGdhbWVhcmVhLmFwcGVuZChwbGF5ZXJEZXN0cm95ZWRTaGlwcywgYm9hcmRzV3JhcHBlciwgZW5lbXlEZXN0cm95ZWRTaGlwcyk7XG4gICAgc2hpcFBpY2tlckJvYXJkLmRpc3BsYXlDdXJyZW50U2hpcCgpO1xuICB9O1xuICBpbml0aWFsaXplKCk7XG5cbiAgY29uc3Qgc3dpdGNoVG9FbmVteUJvYXJkID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBQaWNrZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hpcC1waWNrZXInKTtcbiAgICBzaGlwUGlja2VyLnJlbW92ZSgpO1xuICAgIGJvYXJkc1dyYXBwZXIuYXBwZW5kQ2hpbGQoZW5lbXlCb2FyZERPTS5nZXRCb2FyZERpdigpKTtcbiAgfTtcblxuICBjb25zdCBzaG93V2luTW9kYWwgPSBhc3luYyAobmFtZSkgPT4ge1xuICAgIGlmICghc2hvd2luZ01vZGFsKSB7XG4gICAgICBzaG93aW5nTW9kYWwgPSB0cnVlO1xuICAgICAgYXdhaXQgV2lubmVyTW9kYWwuYW5ub3VuY2VXaW5uZXIobmFtZSk7XG4gICAgICBzaG93aW5nTW9kYWwgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2hvd05hbWVNb2RhbCA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgbmFtZTtcbiAgICBpZiAoIXNob3dpbmdNb2RhbCkge1xuICAgICAgc2hvd2luZ01vZGFsID0gdHJ1ZTtcbiAgICAgIG5hbWUgPSBhd2FpdCBFbnRlck5hbWUuc2hvdygpO1xuICAgICAgc2hvd2luZ01vZGFsID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuYW1lIHx8ICdQbGF5ZXInO1xuICB9O1xuXG4gIGNvbnN0IGNsZWFuQm9hcmRzID0gKCkgPT4ge1xuICAgIHBsYXllckJvYXJkRE9NLmNsZWFuKCk7XG4gICAgZW5lbXlCb2FyZERPTS5jbGVhbigpO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlckJvYXJkcyA9ICgpID0+IHtcbiAgICBjbGVhbkJvYXJkcygpO1xuICAgIHBsYXllckJvYXJkRE9NLnJlbmRlcihwbGF5ZXJCb2FyZC5nZXRBcnJheSgpKTtcbiAgICBlbmVteUJvYXJkRE9NLnJlbmRlcihlbmVteUJvYXJkLmdldEFycmF5KCkpO1xuXG4gICAgc2hpcFBpY2tlckJvYXJkLnJlbmRlcigpO1xuICB9O1xuXG4gIGNvbnN0IGFwcGVuZERlc3Ryb3llZFNoaXAgPSAoc2hpcCwgcGxheWVyKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxuICAgIHN3aXRjaCAocGxheWVyKSB7XG4gICAgICBjYXNlICdwbGF5ZXInOlxuICAgICAgICBwbGF5ZXJEZXN0cm95ZWRTaGlwc0RPTS5hcHBlbmRTaGlwKHNoaXApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VuZW15JzpcbiAgICAgICAgZW5lbXlEZXN0cm95ZWRTaGlwc0RPTS5hcHBlbmRTaGlwKHNoaXApO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJCb2FyZHMsXG4gICAgYXBwZW5kRGVzdHJveWVkU2hpcCxcbiAgICBoYW5kbGVXaW46IHNob3dXaW5Nb2RhbCxcbiAgICBzaG93TmFtZU1vZGFsLFxuICAgIHN3aXRjaFRvRW5lbXlCb2FyZCxcbiAgICBzZXRQbGF5ZXJOYW1lLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgU0hJUF9MRU5HVEhTIH0gZnJvbSAnLi4vLi4vQ09OU1RBTlRTJztcbmltcG9ydCAnLi9zdHlsZXMvU2hpcFBpY2tlckJvYXJkLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNoaXBQaWNrZXJCb2FyZChyb3RhdGVIYW5kbGVyLCBnZXRDdXJyZW50U2hpcElEKSB7XG4gIGxldCBpc1ZlcnRpY2FsID0gZmFsc2U7XG5cbiAgY29uc3QgYm9hcmRXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJvYXJkV3JhcC5pZCA9ICdzaGlwLXBpY2tlcic7XG4gIGJvYXJkV3JhcC5jbGFzc0xpc3QuYWRkKCdib2FyZC13cmFwJyk7XG5cbiAgY29uc3Qgc2hpcFBpY2tlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzaGlwUGlja2VyLmNsYXNzTGlzdC5hZGQoJ3NoaXBwaWNrZXInKTtcblxuICBjb25zdCBhcnJvd0xlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYXJyb3dMZWZ0LmNsYXNzTGlzdC5hZGQoJ2Fycm93LWxlZnQnKTtcblxuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIHRpdGxlLnRleHRDb250ZW50ID0gJ1BsYWNlIHlvdXIgZmxlZXQnO1xuXG4gIGNvbnN0IGN1cnJlbnRTaGlwV3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjdXJyZW50U2hpcFdyYXAuY2xhc3NMaXN0LmFkZCgnY3VycmVudC1zaGlwLXdyYXAnKTtcblxuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnV0dG9uLnRleHRDb250ZW50ID0gJ1JvdGF0ZSBzaGlwJztcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlzVmVydGljYWwgPSAhaXNWZXJ0aWNhbDtcbiAgICByZW5kZXIoKTtcbiAgICByb3RhdGVIYW5kbGVyKCk7XG4gIH0pO1xuXG4gIGNvbnN0IGdldEN1cnJlbnRTaGlwRE9NID0gKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRTaGlwTGVuZ3RoID0gU0hJUF9MRU5HVEhTW2dldEN1cnJlbnRTaGlwSUQoKV07XG4gICAgY29uc3Qgc2hpcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtdmVydGljYWwnKTtcbiAgICB9XG4gICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGVzdHJveWVkLXNoaXAnLCAnY3VycmVudC1zaGlwJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnY2VsbCcpO1xuICAgICAgc2hpcEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgfVxuICAgIHJldHVybiBzaGlwRWxlbWVudDtcbiAgfTtcblxuICBjb25zdCBjbGVhbiA9ICgpID0+IHtcbiAgICBjdXJyZW50U2hpcFdyYXAudGV4dENvbnRlbnQgPSAnJztcbiAgICBib2FyZFdyYXAudGV4dENvbnRlbnQgPSAnJztcbiAgICBzaGlwUGlja2VyLnRleHRDb250ZW50ID0gJyc7XG4gIH07XG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBjbGVhbigpO1xuICAgIGNvbnN0IGN1cnJlbnRTaGlwID0gZ2V0Q3VycmVudFNoaXBET00oKTtcbiAgICBjdXJyZW50U2hpcFdyYXAuYXBwZW5kQ2hpbGQoY3VycmVudFNoaXApO1xuICAgIHNoaXBQaWNrZXIuYXBwZW5kKGFycm93TGVmdCwgdGl0bGUsIGJ1dHRvbiwgY3VycmVudFNoaXBXcmFwKTtcbiAgICBib2FyZFdyYXAuYXBwZW5kKHNoaXBQaWNrZXIpO1xuICB9O1xuXG4gIGNvbnN0IGdldEJvYXJkV3JhcCA9ICgpID0+IGJvYXJkV3JhcDtcblxuICByZXR1cm4geyBnZXRCb2FyZFdyYXAsIGRpc3BsYXlDdXJyZW50U2hpcDogZ2V0Q3VycmVudFNoaXBET00sIHJlbmRlciB9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbmV4cG9ydCBjbGFzcyBPdmVybGFwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnT3ZlcmxhcEVycm9yJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3V0T2ZCb3VuZHNFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdPdXRPZkJvdW5kc0Vycm9yJztcbiAgfVxufVxuIiwiaW1wb3J0IEdhbWVCb2FyZEZhY3RvcnkgZnJvbSAnLi4vR2FtZWJvYXJkL0dhbWVib2FyZEZhY3RvcnknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQbGF5ZXJGYWN0b3J5KG5hbWUpIHtcbiAgbGV0IHBsYXllck5hbWUgPSBuYW1lO1xuICBjb25zdCBib2FyZCA9IEdhbWVCb2FyZEZhY3RvcnkoKTtcbiAgY29uc3QgYXJyYXlPZkhpdHMgPSBbXTtcblxuICBjb25zdCBnZXROYW1lID0gKCkgPT4gcGxheWVyTmFtZTtcbiAgY29uc3Qgc2V0TmFtZSA9IChuZXdOYW1lKSA9PiB7XG4gICAgcGxheWVyTmFtZSA9IG5ld05hbWU7XG4gIH07XG4gIGNvbnN0IGdldEJvYXJkID0gKCkgPT4gYm9hcmQ7XG5cbiAgY29uc3QgYXR0YWNrID0gKHgsIHksIGVuZW15UGxheWVyKSA9PiB7XG4gICAgY29uc3QgZW5lbXlCb2FyZCA9IGVuZW15UGxheWVyLmdldEJvYXJkKCk7XG4gICAgYXJyYXlPZkhpdHMucHVzaCh7IHgsIHkgfSk7XG4gICAgcmV0dXJuIGVuZW15Qm9hcmQucmVjZWl2ZUF0dGFjayh4LCB5KTtcbiAgfTtcblxuICAvKipcbiAgKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHggYW5kIHkgY29vcmRzIHRoYXQgaGF2ZSBub3QgYmVlbiBoaXQgYmVmb3JlLlxuICAqIEBwYXJhbSB7b2JqZWN0fSBjb29yZHMgT2JqZWN0IHdpdGggeCBhbmQgeSBrZXlzIChjb29yZGluYXRlcykuXG4gICovXG4gIGNvbnN0IHdhc0FscmVhZHlIaXQgPSAoY29vcmRzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXJyYXlPZkhpdHMuc29tZSgoZWwpID0+IHtcbiAgICAgIGlmIChlbC54ID09PSBjb29yZHMueCAmJiBlbC55ID09PSBjb29yZHMueSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IHNtYXJ0QXR0YWNrID0gKGVuZW15UGxheWVyKSA9PiB7XG4gICAgbGV0IHByZXZpb3VzSGl0O1xuICAgIGlmIChhcnJheU9mSGl0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHByZXZpb3VzSGl0ID0gYXJyYXlPZkhpdHNbYXJyYXlPZkhpdHMubGVuZ3RoIC0gMV1cbiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gcHJldmlvdXNIaXQ7XG5cbiAgICAgIGF0dGFjayh4ICsgMSwgeSwgZW5lbXlQbGF5ZXIpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhdHRhY2tSYW5kb21Qb3NpdGlvbiA9IChlbmVteVBsYXllcikgPT4ge1xuICAgIGlmIChhcnJheU9mSGl0cyA+PSAxMDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tU2luZ2xlQ29vcmQgPSAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cbiAgICBjb25zdCByYW5kb21Db29yZHMgPSAoKSA9PiAoe1xuICAgICAgeDogcmFuZG9tU2luZ2xlQ29vcmQoKSxcbiAgICAgIHk6IHJhbmRvbVNpbmdsZUNvb3JkKCksXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB4IGFuZCB5IGNvb3JkcyB0aGF0IGhhdmUgbm90IGJlZW4gaGl0IGJlZm9yZS5cbiAgICovXG4gICAgY29uc3QgZ2V0VW5pcXVlQ29vcmRzID0gKCkgPT4ge1xuICAgICAgbGV0IGNvb3JkcyA9IHJhbmRvbUNvb3JkcygpO1xuICAgICAgaWYgKCh3YXNBbHJlYWR5SGl0KGNvb3JkcykpKSB7XG4gICAgICAgIGNvb3JkcyA9IGdldFVuaXF1ZUNvb3JkcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9O1xuXG4gICAgY29uc3QgdW5pcXVlQ29vcmRzID0gZ2V0VW5pcXVlQ29vcmRzKCk7XG5cbiAgICBjb25zdCBhdHRhY2tEYXRhID0gYXR0YWNrKHVuaXF1ZUNvb3Jkcy54LCB1bmlxdWVDb29yZHMueSwgZW5lbXlQbGF5ZXIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgIHJldHVybiBhdHRhY2tEYXRhO1xuICB9O1xuXG4gIGNvbnN0IGRlbGF5ZWRSYW5kb21BdHRhY2sgPSBhc3luYyAoZGVsYXksIHBsYXllcikgPT4ge1xuICAgIGNvbnN0IHRpbWVyID0gKG1zKSA9PiBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgbXMpKTtcbiAgICBhd2FpdCB0aW1lcihkZWxheSk7XG4gICAgcmV0dXJuIGF0dGFja1JhbmRvbVBvc2l0aW9uKHBsYXllcik7XG4gIH07XG4gIHJldHVybiAoe1xuICAgIGdldE5hbWUsXG4gICAgc2V0TmFtZSxcbiAgICBnZXRCb2FyZCxcbiAgICBhdHRhY2ssXG4gICAgYXR0YWNrUmFuZG9tUG9zaXRpb24sXG4gICAgZGVsYXllZFJhbmRvbUF0dGFjayxcbiAgfSk7XG59XG4iLCJpbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XG5pbXBvcnQgQXJyYXkyRCBmcm9tICcuLi9IZWxwZXJzL0FycmF5MmQnO1xuaW1wb3J0IFNoaXBGYWN0b3J5IGZyb20gJy4uL1NoaXAvU2hpcEZhY3RvcnknO1xuaW1wb3J0IHsgRURHRV9TSVpFIH0gZnJvbSAnLi4vLi4vQ09OU1RBTlRTJztcbmltcG9ydCB7IE91dE9mQm91bmRzRXJyb3IsIE92ZXJsYXBFcnJvciB9IGZyb20gJy4vQ3VzdG9tRXJyb3JzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2FtZUJvYXJkRmFjdG9yeSgpIHtcbiAgY29uc3QgcGxhY2VkU2hpcHMgPSBbXTtcbiAgY29uc3QgbWF0cmljZSA9IEFycmF5MkQoXG4gICAgRURHRV9TSVpFLFxuICAgIHtcbiAgICAgIGlzU2hpcDogZmFsc2UsXG4gICAgICBpc0hpdDogZmFsc2UsXG4gICAgICBpc1ByZXZpZXc6IGZhbHNlLFxuICAgIH0sXG4gICk7XG4gIGxldCBwcmV2aW91c1ByZXZpZXdlZENvb3JkcyA9IFtdO1xuXG4gIC8qKlxuICAqIFByZXBhcmVzIHNoaXAgY29vcmRpbmF0ZXMgYnkgY2hlY2tpbmcgZm9yIGJvdW5kcyBhbmQgaW50ZXJzZWN0c1xuICAqIFRocm93cyBlcnJvciBvbiBib3VuZCBvciBpbnRlcnNlY3QgdmlvbGF0aW9uXG4gICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIG9iamVjdHMgY29udGFpbmluZyAoeCx5KSBjb29yZGluYXRlcy5cbiAgKi9cbiAgY29uc3QgcHJlcGFyZVNoaXBDb29yZGluYXRlcyA9ICh4LCB5LCBpc1ZlcnRpY2FsLCBsZW5ndGgpID0+IHtcbiAgICBjb25zdCBwcmVwYXJlZENvb3JkcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCB5QXhpcztcbiAgICAgIGxldCB4QXhpcztcblxuICAgICAgLy8gY2FsY3VsYXRlIGNvcnJlY3QgeCBhbmQgeSB2YWx1ZXMgYmFzZWQgb24gaWYgdGhlIHNoaXAgaXMgdmVydGljYWwgb3IgaG9yaXpvbnRhbFxuICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgeUF4aXMgPSB5ICsgaTtcbiAgICAgICAgeEF4aXMgPSB4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeUF4aXMgPSB5O1xuICAgICAgICB4QXhpcyA9IHggKyBpO1xuICAgICAgfVxuXG4gICAgICBpZiAoeUF4aXMgPj0gRURHRV9TSVpFIHx8IHhBeGlzID49IEVER0VfU0laRSkge1xuICAgICAgICB0aHJvdyBuZXcgT3V0T2ZCb3VuZHNFcnJvcihcIlNoaXAgZG9lc24ndCBmaXQgdGhlIGdhbWVib2FyZFwiKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VycmVudERhdGFPbkNvb3JkaW5hdGVzID0gbWF0cmljZS5nZXRTaW5nbGVWYWx1ZSh4QXhpcywgeUF4aXMpO1xuXG4gICAgICBpZiAoY3VycmVudERhdGFPbkNvb3JkaW5hdGVzLmlzU2hpcCAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IE92ZXJsYXBFcnJvcignU2hpcCBvdmVybGFwcyBhbHJlYWR5IGV4aXN0aW5nIHNoaXAnKTtcbiAgICAgIH1cblxuICAgICAgcHJlcGFyZWRDb29yZHMucHVzaCh7IHhBeGlzLCB5QXhpcyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXBhcmVkQ29vcmRzO1xuICB9O1xuXG4gIGNvbnN0IGNsZWFuUHJldmlvdXNTaGlwUHJldmlldyA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwcmV2aW91c1ByZXZpZXdlZENvb3Jkcy5mb3JFYWNoKChjb29yZHMpID0+IHtcbiAgICAgIG1hdHJpY2Uud3JpdGVTaW5nbGVDZWxsS2V5UGFpcihcbiAgICAgICAgY29vcmRzLnhBeGlzLFxuICAgICAgICBjb29yZHMueUF4aXMsXG4gICAgICAgICdpc1ByZXZpZXcnLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgcHJldmlld1NoaXBQbGFjZW1lbnQgPSAoeCwgeSwgaXNWZXJ0aWNhbCwgbGVuZ3RoKSA9PiB7XG4gICAgY2xlYW5QcmV2aW91c1NoaXBQcmV2aWV3KCk7XG4gICAgY29uc3QgcHJlcGFyZWRDb29yZHMgPSBwcmVwYXJlU2hpcENvb3JkaW5hdGVzKHgsIHksIGlzVmVydGljYWwsIGxlbmd0aCk7XG4gICAgcHJldmlvdXNQcmV2aWV3ZWRDb29yZHMgPSBwcmVwYXJlZENvb3JkcztcblxuICAgIHByZXBhcmVkQ29vcmRzLmZvckVhY2goKGNvb3JkcykgPT4ge1xuICAgICAgbWF0cmljZS53cml0ZVNpbmdsZUNlbGxLZXlQYWlyKFxuICAgICAgICBjb29yZHMueEF4aXMsXG4gICAgICAgIGNvb3Jkcy55QXhpcyxcbiAgICAgICAgJ2lzUHJldmlldycsXG4gICAgICAgIHRydWUsXG4gICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9ICh4LCB5LCBpc1ZlcnRpY2FsLCBsZW5ndGgpID0+IHtcbiAgICBjb25zdCBzaGlwID0gU2hpcEZhY3RvcnkobGVuZ3RoKTtcbiAgICBjb25zdCBwcmVwYXJlZENvb3JkcyA9IHByZXBhcmVTaGlwQ29vcmRpbmF0ZXMoeCwgeSwgaXNWZXJ0aWNhbCwgbGVuZ3RoKTtcblxuICAgIHByZXBhcmVkQ29vcmRzLmZvckVhY2goKGNvb3JkcykgPT4ge1xuICAgICAgbWF0cmljZS5zZXRTaW5nbGVDZWxsT2JqZWN0KFxuICAgICAgICBjb29yZHMueEF4aXMsXG4gICAgICAgIGNvb3Jkcy55QXhpcyxcbiAgICAgICAge1xuICAgICAgICAgIGlzU2hpcDogc2hpcCxcbiAgICAgICAgICBpc0hpdDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcGxhY2VkU2hpcHMucHVzaChzaGlwKTtcbiAgICByZXR1cm4gc2hpcDtcbiAgfTtcblxuICBjb25zdCBnZXRSYW5kb21Db29yZHMgPSAoaXNWZXJ0aWNhbCwgc2hpcExlbmd0aCkgPT4ge1xuICAgIGxldCB4O1xuICAgIGxldCB5O1xuICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKEVER0VfU0laRSAtIHNoaXBMZW5ndGgpKTtcbiAgICAgIHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBFREdFX1NJWkUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKEVER0VfU0laRSAtIHNoaXBMZW5ndGgpKTtcbiAgICAgIHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBFREdFX1NJWkUpO1xuICAgIH1cbiAgICByZXR1cm4geyB4LCB5IH07XG4gIH07XG5cbiAgY29uc3QgYXV0b1BsYWNlU2hpcHMgPSAoc2hpcExlbmd0aHMpID0+IHtcbiAgICBzaGlwTGVuZ3Rocy5mb3JFYWNoKChzaGlwTGVuZ3RoKSA9PiB7XG4gICAgICBjb25zdCBwcmVwYXJlQ29vcmRzQW5kUGxhY2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IGdldFJhbmRvbUNvb3Jkcyhpc1ZlcnRpY2FsLCBzaGlwTGVuZ3RoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwbGFjZVNoaXAoeCwgeSwgaXNWZXJ0aWNhbCwgc2hpcExlbmd0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuICdlcnJvcic7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxldCBzdGF0dXM7XG4gICAgICBsZXQgbWF4UmV0cmllcyA9IDEwMDtcbiAgICAgIGRvIHtcbiAgICAgICAgc3RhdHVzID0gcHJlcGFyZUNvb3Jkc0FuZFBsYWNlKCk7XG4gICAgICAgIG1heFJldHJpZXMgLT0gMTtcbiAgICAgICAgaWYgKG1heFJldHJpZXMgPD0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGF1dG9wbGFjZSB5b3VyIHNoaXBzIChtYXggcmV0cmllcyBleGNlZWRlZClcIik7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKHN0YXR1cyA9PT0gJ2Vycm9yJyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9ICh4LCB5KSA9PiB7XG4gICAgY29uc3QgY2VsbCA9IG1hdHJpY2UuZ2V0U2luZ2xlVmFsdWUoeCwgeSk7XG4gICAgbGV0IGRhdGEgPSB7fTtcblxuICAgIC8vIHRocm93IGVycm9yIGlmIHRoZSBjZWxsIHdhcyBhbHJlYWR5IGhpdFxuICAgIGlmIChjZWxsLmlzSGl0ID09PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoaXQgdGhlIHNhbWUgcGxhY2UgdHdpY2UnKTtcbiAgICB9XG5cbiAgICAvLyByZWdpc3RlciBhIHNoaXAgaGl0IGlmIHRoZXJlJ3MgYSBzaGlwIG9uIHRoZSBjb29yZHMgYW5kIGlzIG5vdCBoaXRcbiAgICBpZiAoY2VsbC5pc1NoaXAgIT09IGZhbHNlICYmIGNlbGwuaXNIaXQgPT09IGZhbHNlKSB7XG4gICAgICBjZWxsLmlzU2hpcC5oaXQoKTtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIGlzU2hpcDogY2VsbC5pc1NoaXAsXG4gICAgICAgIGlzSGl0OiB0cnVlLFxuICAgICAgICBpc1N1bms6IGNlbGwuaXNTaGlwLmlzU3VuaygpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyByZWdpc3RlciBhIG1pc3NlZCBoaXRcbiAgICBpZiAoY2VsbC5pc1NoaXAgPT09IGZhbHNlICYmIGNlbGwuaXNIaXQgPT09IGZhbHNlKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICBpc1NoaXA6IGZhbHNlLFxuICAgICAgICBpc0hpdDogdHJ1ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbWF0cmljZS5zZXRTaW5nbGVDZWxsT2JqZWN0KHgsIHksIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIGNvbnN0IGFyZUFsbFNoaXBzU3VuayA9ICgpID0+IHBsYWNlZFNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKTtcblxuICBjb25zdCBnZXRTdW5rU2hpcHMgPSAoKSA9PiBwbGFjZWRTaGlwcy5maWx0ZXIoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpO1xuXG4gIGNvbnN0IGdldEFycmF5ID0gKCkgPT4gbWF0cmljZS5nZXRBcnJheSgpO1xuXG4gIHJldHVybiB7XG4gICAgcGxhY2VTaGlwLFxuICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgYXJlQWxsU2hpcHNTdW5rLFxuICAgIGdldEFycmF5LFxuICAgIGF1dG9QbGFjZVNoaXBzLFxuICAgIGdldFN1bmtTaGlwcyxcbiAgICBwcmV2aWV3U2hpcFBsYWNlbWVudCxcbiAgICBjbGVhblByZXZpb3VzU2hpcFByZXZpZXcsXG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcnJheTJEKHNpemUsIGRlZmF1bHRWYWx1ZSkge1xuICBjb25zdCBtYXRyaWNlID0gW107XG5cbiAgY29uc3QgaW5pdGlhbGl6ZSA9ICgpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkgKz0gMSkge1xuICAgICAgbWF0cmljZS5wdXNoKG5ldyBBcnJheShzaXplKS5maWxsKGRlZmF1bHRWYWx1ZSkpO1xuICAgIH1cbiAgfTtcblxuICBpbml0aWFsaXplKCk7XG5cbiAgY29uc3Qgc2V0U2luZ2xlQ2VsbE9iamVjdCA9ICh4LCB5LCBzdGF0ZSkgPT4ge1xuICAgIGlmICh4IDwgc2l6ZSAmJiB5IDwgc2l6ZSkge1xuICAgICAgbWF0cmljZVt5XVt4XSA9IHN0YXRlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ29vcmRpbmF0ZXMgb3V0IG9mIGJvdW5kcycpO1xuICB9O1xuXG4gIGNvbnN0IGdldEFycmF5ID0gKCkgPT4gbWF0cmljZTtcblxuICBjb25zdCB3cml0ZVNpbmdsZUNlbGxPYmplY3RWYWx1ZSA9ICh4LCB5LCBrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHggPCBzaXplICYmIHkgPCBzaXplKSB7XG4gICAgICBjb25zdCBvYmogPSBtYXRyaWNlW3ldW3hdO1xuICAgICAgY29uc3QgbmV3T2JqID0geyAuLi5vYmogfTtcbiAgICAgIG5ld09ialtrZXldID0gdmFsdWU7XG4gICAgICBtYXRyaWNlW3ldW3hdID0gbmV3T2JqO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRTaW5nbGVWYWx1ZSA9ICh4LCB5KSA9PiB7XG4gICAgaWYgKHggPCBzaXplICYmIHkgPCBzaXplKSB7XG4gICAgICByZXR1cm4gbWF0cmljZVt5XVt4XTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb29yZGluYXRlcyBvdXQgb2YgYm91bmRzJyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRTaW5nbGVDZWxsT2JqZWN0LFxuICAgIGdldEFycmF5LFxuICAgIGdldFNpbmdsZVZhbHVlLFxuICAgIHdyaXRlU2luZ2xlQ2VsbEtleVBhaXI6IHdyaXRlU2luZ2xlQ2VsbE9iamVjdFZhbHVlLFxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2hpcEZhY3RvcnkobGVuZ3RoKSB7XG4gIGxldCBudW1iZXJPZkhpdHMgPSAwO1xuXG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBudW1iZXJPZkhpdHMgKz0gMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiAobnVtYmVyT2ZIaXRzID09PSBsZW5ndGgpO1xuXG4gIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IGxlbmd0aDtcblxuICByZXR1cm4geyBoaXQsIGlzU3VuaywgZ2V0TGVuZ3RoIH07XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuaW1wb3J0IERPTW1hbmFnZXIgZnJvbSAnLi9kb20vRE9NbWFuYWdlcic7XG5pbXBvcnQgUGxheWVyRmFjdG9yeSBmcm9tICcuL21vZHVsZXMvUGxheWVyL1BsYXllckZhY3RvcnknO1xuaW1wb3J0IHsgQUlfREVMQVksIFNISVBfTEVOR1RIUyB9IGZyb20gJy4vQ09OU1RBTlRTJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdhbWVMb29wKGxhc3RVc2VkTmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBsZXQgY3VycmVudFNoaXBJRCA9IDA7XG4gICAgY29uc3QgcGxheWVyID0gUGxheWVyRmFjdG9yeSgncGxhY2Vob2xkZXInKTtcbiAgICBjb25zdCBlbmVteSA9IFBsYXllckZhY3RvcnkoJ0NvbXB1dGVyJyk7XG4gICAgY29uc3QgcGxheWVyQm9hcmQgPSBwbGF5ZXIuZ2V0Qm9hcmQoKTtcbiAgICBjb25zdCBlbmVteUJvYXJkID0gZW5lbXkuZ2V0Qm9hcmQoKTtcbiAgICBjb25zdCBkaXNwbGF5TWFuYWdlciA9IERPTW1hbmFnZXIoXG4gICAgICBwbGF5ZXJCb2FyZCxcbiAgICAgIGVuZW15Qm9hcmQsXG4gICAgICBoYW5kbGVFbmVteUNlbGxDbGljayxcbiAgICAgIGhhbmRsZVBsYXllckNlbGxDbGljayxcbiAgICAgIGhhbmRsZVBsYXllckNlbGxIb3ZlcixcbiAgICAgIHJvdGF0ZUhhbmRsZXIsXG4gICAgICBnZXRDdXJyZW50U2hpcElELFxuICAgICk7XG5cbiAgICBsZXQgbGlzdGVuRm9yQ2xpY2tzRW5lbXlCb2FyZCA9IGZhbHNlO1xuICAgIGxldCBuZXh0UGxheWVyID0gJ3BsYXllcic7XG4gICAgbGV0IHBsYWNpbmdTaGlwcyA9IHRydWU7XG4gICAgbGV0IGlzU2hpcFZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBwbGF5ZXJOYW1lTW9kYWwoKSB7XG4gICAgICBjb25zdCBwbGF5ZXJOYW1lID0gYXdhaXQgZ2V0UGxheWVyTmFtZSgpO1xuICAgICAgcGxheWVyLnNldE5hbWUocGxheWVyTmFtZSk7XG4gICAgICBkaXNwbGF5TWFuYWdlci5zZXRQbGF5ZXJOYW1lKHBsYXllck5hbWUpO1xuICAgIH1cblxuICAgIGlmICghbGFzdFVzZWROYW1lKSB7XG4gICAgICBwbGF5ZXJOYW1lTW9kYWwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheWVyLnNldE5hbWUobGFzdFVzZWROYW1lKTtcbiAgICAgIGRpc3BsYXlNYW5hZ2VyLnNldFBsYXllck5hbWUobGFzdFVzZWROYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVIYW5kbGVyKCkge1xuICAgICAgaXNTaGlwVmVydGljYWwgPSAhaXNTaGlwVmVydGljYWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFNoaXBJRCgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50U2hpcElEO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGdldFBsYXllck5hbWUoKSB7XG4gICAgICBjb25zdCBuYW1lID0gYXdhaXQgZGlzcGxheU1hbmFnZXIuc2hvd05hbWVNb2RhbCgpO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gY2hlY2tXaW5uZXIoKSB7XG4gICAgICBpZiAocGxheWVyQm9hcmQuYXJlQWxsU2hpcHNTdW5rKCkgPT09IHRydWUpIHtcbiAgICAgICAgYXdhaXQgZGlzcGxheU1hbmFnZXIuaGFuZGxlV2luKGVuZW15LmdldE5hbWUoKSk7XG4gICAgICAgIHJlc29sdmUocGxheWVyLmdldE5hbWUoKSk7XG4gICAgICB9XG4gICAgICBpZiAoZW5lbXlCb2FyZC5hcmVBbGxTaGlwc1N1bmsoKSA9PT0gdHJ1ZSkge1xuICAgICAgICBhd2FpdCBkaXNwbGF5TWFuYWdlci5oYW5kbGVXaW4ocGxheWVyLmdldE5hbWUoKSk7XG4gICAgICAgIHJlc29sdmUocGxheWVyLmdldE5hbWUoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcGxheWVyVHVybiA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICBjb25zdCBhdHRhY2tEYXRhID0gYXdhaXQgcGxheWVyLmF0dGFjayhkYXRhLngsIGRhdGEueSwgZW5lbXkpO1xuICAgICAgY2hlY2tXaW5uZXIoKTtcbiAgICAgIGRpc3BsYXlNYW5hZ2VyLnJlbmRlckJvYXJkcygpO1xuICAgICAgaWYgKGF0dGFja0RhdGE/LmlzU3VuayA9PT0gdHJ1ZSkge1xuICAgICAgICBkaXNwbGF5TWFuYWdlci5hcHBlbmREZXN0cm95ZWRTaGlwKGF0dGFja0RhdGEuaXNTaGlwLCAnZW5lbXknKTtcbiAgICAgIH1cbiAgICAgIGlmIChhdHRhY2tEYXRhPy5pc1NoaXAgIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAncGxheWVyJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnY29tcHV0ZXInO1xuICAgIH07XG5cbiAgICBjb25zdCBjb21wdXRlclR1cm4gPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlbmVteUF0dGFja0RhdGEgPSBhd2FpdCBlbmVteS5kZWxheWVkUmFuZG9tQXR0YWNrKEFJX0RFTEFZLCBwbGF5ZXIpO1xuICAgICAgY2hlY2tXaW5uZXIoKTtcbiAgICAgIGRpc3BsYXlNYW5hZ2VyLnJlbmRlckJvYXJkcygpO1xuXG4gICAgICBpZiAoZW5lbXlBdHRhY2tEYXRhPy5pc1N1bmsgPT09IHRydWUpIHtcbiAgICAgICAgZGlzcGxheU1hbmFnZXIuYXBwZW5kRGVzdHJveWVkU2hpcChlbmVteUF0dGFja0RhdGEuaXNTaGlwLCAncGxheWVyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmVteUF0dGFja0RhdGE/LmlzU2hpcCAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuICdjb21wdXRlcic7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3BsYXllcic7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uZUdhbWVUdXJuID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChsaXN0ZW5Gb3JDbGlja3NFbmVteUJvYXJkICYmIChuZXh0UGxheWVyID09PSAncGxheWVyJykpIHtcbiAgICAgICAgICBuZXh0UGxheWVyID0gYXdhaXQgcGxheWVyVHVybihkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dFBsYXllciA9PT0gJ2NvbXB1dGVyJykge1xuICAgICAgICAgIGxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQgPSBmYWxzZTtcbiAgICAgICAgICBuZXh0UGxheWVyID0gYXdhaXQgY29tcHV0ZXJUdXJuKCk7XG4gICAgICAgICAgaWYgKG5leHRQbGF5ZXIgPT09ICdjb21wdXRlcicpIHtcbiAgICAgICAgICAgIG9uZUdhbWVUdXJuKCcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGlzdGVuRm9yQ2xpY2tzRW5lbXlCb2FyZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIGlnbm9yZSBlcnJvclxuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgcHJldkRhdGE7XG4gICAgZnVuY3Rpb24gaGFuZGxlUGxheWVyQ2VsbEhvdmVyKGRhdGEpIHtcbiAgICAgIGlmIChwbGFjaW5nU2hpcHMpIHtcbiAgICAgICAgaWYgKHByZXZEYXRhPy54ICE9PSBkYXRhLnggfHwgcHJldkRhdGE/LnkgIT09IGRhdGEueSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGF5ZXJCb2FyZC5wcmV2aWV3U2hpcFBsYWNlbWVudChcbiAgICAgICAgICAgICAgTnVtYmVyKGRhdGEueCksXG4gICAgICAgICAgICAgIE51bWJlcihkYXRhLnkpLFxuICAgICAgICAgICAgICBpc1NoaXBWZXJ0aWNhbCxcbiAgICAgICAgICAgICAgU0hJUF9MRU5HVEhTW2N1cnJlbnRTaGlwSURdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRpc3BsYXlNYW5hZ2VyLnJlbmRlckJvYXJkcygpO1xuICAgICAgICAgICAgcHJldkRhdGEgPSB7IC4uLmRhdGEgfTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlUGxheWVyQ2VsbENsaWNrKGRhdGEpIHtcbiAgICAgIGlmIChwbGFjaW5nU2hpcHMpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRTaGlwSUQgPCBTSElQX0xFTkdUSFMubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcChcbiAgICAgICAgICAgICAgTnVtYmVyKGRhdGEueCksXG4gICAgICAgICAgICAgIE51bWJlcihkYXRhLnkpLFxuICAgICAgICAgICAgICBpc1NoaXBWZXJ0aWNhbCxcbiAgICAgICAgICAgICAgU0hJUF9MRU5HVEhTW2N1cnJlbnRTaGlwSURdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGN1cnJlbnRTaGlwSUQgKz0gMTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdPdXRPZkJvdW5kc0Vycm9yJyB8fCBlcnJvci5uYW1lID09PSAnT3ZlcmxhcEVycm9yJykge1xuICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nLCBpZ25vcmUgdGhvc2UgZXJyb3JzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50U2hpcElEID09PSBTSElQX0xFTkdUSFMubGVuZ3RoKSB7XG4gICAgICAgICAgcGxhY2luZ1NoaXBzID0gZmFsc2U7XG4gICAgICAgICAgY3VycmVudFNoaXBJRCA9IDA7XG4gICAgICAgICAgbGlzdGVuRm9yQ2xpY2tzRW5lbXlCb2FyZCA9IHRydWU7XG4gICAgICAgICAgYXdhaXQgcGxheWVyQm9hcmQuY2xlYW5QcmV2aW91c1NoaXBQcmV2aWV3KCk7XG4gICAgICAgICAgZGlzcGxheU1hbmFnZXIuc3dpdGNoVG9FbmVteUJvYXJkKCk7XG4gICAgICAgICAgZGlzcGxheU1hbmFnZXIucmVuZGVyQm9hcmRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbmVteUNlbGxDbGljayhkYXRhKSB7XG4gICAgICBpZiAobGlzdGVuRm9yQ2xpY2tzRW5lbXlCb2FyZCkge1xuICAgICAgICBvbmVHYW1lVHVybihkYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbmVteUJvYXJkLmF1dG9QbGFjZVNoaXBzKFNISVBfTEVOR1RIUyk7XG4gICAgZGlzcGxheU1hbmFnZXIucmVuZGVyQm9hcmRzKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBwbGF5KCkge1xuICBsZXQgbGFzdFVzZWROYW1lO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIGVuZGxlc3MgZ2FtZXBsYXlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgIGxhc3RVc2VkTmFtZSA9IGF3YWl0IGdhbWVMb29wKGxhc3RVc2VkTmFtZSk7XG4gIH1cbn1cbiIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHBsYXkgZnJvbSAnLi9nYW1lJztcblxucGxheSgpO1xuIl0sIm5hbWVzIjpbInJ1bnRpbWUiLCJleHBvcnRzIiwidW5kZWZpbmVkIiwiT3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwib2JqIiwia2V5IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiZG9uZSIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwidGhpcyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJUeXBlRXJyb3IiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIm1vZHVsZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIkJvYXJkIiwiYm9hcmREYXRhIiwiaGFuZGxlQ2VsbENsaWNrIiwiaGFuZGxlQ2VsbEhvdmVyIiwiYm9hcmRXcmFwcGVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYm9hcmQiLCJib2FyZEhlYWRpbmciLCJ0ZXh0Q29udGVudCIsImFwcGVuZCIsImdldEJvYXJkRGl2IiwicmVuZGVyIiwiYXJyYXkiLCJyb3dEYXRhIiwieSIsImNlbGxEYXRhIiwieCIsImN1cnJlbnRDZWxsIiwiY2VsbEVsIiwiZGF0YXNldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NoaXAiLCJpc1ByZXZpZXciLCJpc0hpdCIsImlzU3VuayIsImFwcGVuZENoaWxkIiwiY2xlYW4iLCJzZXROYW1lIiwiY2hhbmdlSGVhZGluZ05hbWUiLCJEZXN0cm95ZWRTaGlwcyIsIndyYXBwZXIiLCJ0aXRsZSIsImluaXRpYWxpemUiLCJhcHBlbmRTaGlwIiwic2hpcCIsInNoaXBFbGVtZW50IiwiZ2V0TGVuZ3RoIiwiY2VsbCIsImdldEVsZW1lbnQiLCJtb2RhbCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsImFkZENsb3NlSWNvbiIsImNsb3NlSWNvbiIsImlubmVySFRNTCIsInNob3dPd25Qcm9taXNlIiwiZWxlbWVudCIsInNob3ciLCJjbGVhbk1vZGFsIiwicmVtb3ZlIiwiaW5uZXJUZXh0IiwiaW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJsYWJlbCIsImhhbmRsZVN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjaGVja1ZhbGlkaXR5Iiwic3R5bGUiLCJkaXNwbGF5IiwicGxhY2Vob2xkZXIiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJ0YXJnZXQiLCJidXR0b24iLCJpbnB1dEJ1dHRvbldyYXBwZXIiLCJTSElQX0xFTkdUSFMiLCJFREdFX1NJWkUiLCJhbm5vdW5jZW1lbnQiLCJET01tYW5hZ2VyIiwicGxheWVyQm9hcmQiLCJlbmVteUJvYXJkIiwiaGFuZGxlRW5lbXlDZWxsQ2xpY2siLCJoYW5kbGVQbGF5ZXJDZWxsQ2xpY2siLCJoYW5kbGVQbGF5ZXJDZWxsSG92ZXIiLCJyb3RhdGVIYW5kbGVyIiwiZ2V0Q3VycmVudFNoaXBJRCIsInNob3dpbmdNb2RhbCIsImdhbWVhcmVhIiwicGxheWVyRGVzdHJveWVkU2hpcHNET00iLCJlbmVteURlc3Ryb3llZFNoaXBzRE9NIiwic2hpcFBpY2tlckJvYXJkIiwiaXNWZXJ0aWNhbCIsImJvYXJkV3JhcCIsImlkIiwic2hpcFBpY2tlciIsImFycm93TGVmdCIsImN1cnJlbnRTaGlwV3JhcCIsImdldEN1cnJlbnRTaGlwRE9NIiwiY3VycmVudFNoaXBMZW5ndGgiLCJjdXJyZW50U2hpcCIsImdldEJvYXJkV3JhcCIsImRpc3BsYXlDdXJyZW50U2hpcCIsIlNoaXBQaWNrZXJCb2FyZCIsImJvYXJkc1dyYXBwZXIiLCJwbGF5ZXJCb2FyZERPTSIsImVuZW15Qm9hcmRET00iLCJwbGF5ZXJEZXN0cm95ZWRTaGlwcyIsImVuZW15RGVzdHJveWVkU2hpcHMiLCJyZW5kZXJCb2FyZHMiLCJnZXRBcnJheSIsImFwcGVuZERlc3Ryb3llZFNoaXAiLCJwbGF5ZXIiLCJoYW5kbGVXaW4iLCJzaG93TmFtZU1vZGFsIiwic3dpdGNoVG9FbmVteUJvYXJkIiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXRQbGF5ZXJOYW1lIiwiT3ZlcmxhcEVycm9yIiwibWVzc2FnZSIsInN1cGVyIiwiT3V0T2ZCb3VuZHNFcnJvciIsIlBsYXllckZhY3RvcnkiLCJwbGF5ZXJOYW1lIiwicGxhY2VkU2hpcHMiLCJtYXRyaWNlIiwic2l6ZSIsImRlZmF1bHRWYWx1ZSIsIkFycmF5IiwiZmlsbCIsInNldFNpbmdsZUNlbGxPYmplY3QiLCJnZXRTaW5nbGVWYWx1ZSIsIndyaXRlU2luZ2xlQ2VsbEtleVBhaXIiLCJuZXdPYmoiLCJBcnJheTJEIiwicHJldmlvdXNQcmV2aWV3ZWRDb29yZHMiLCJwcmVwYXJlU2hpcENvb3JkaW5hdGVzIiwicHJlcGFyZWRDb29yZHMiLCJ5QXhpcyIsInhBeGlzIiwiY2xlYW5QcmV2aW91c1NoaXBQcmV2aWV3IiwiY29vcmRzIiwicGxhY2VTaGlwIiwibnVtYmVyT2ZIaXRzIiwiaGl0IiwiU2hpcEZhY3RvcnkiLCJyZWNlaXZlQXR0YWNrIiwiZGF0YSIsImFyZUFsbFNoaXBzU3VuayIsImV2ZXJ5IiwiYXV0b1BsYWNlU2hpcHMiLCJzaGlwTGVuZ3RocyIsInNoaXBMZW5ndGgiLCJwcmVwYXJlQ29vcmRzQW5kUGxhY2UiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJnZXRSYW5kb21Db29yZHMiLCJzdGF0dXMiLCJtYXhSZXRyaWVzIiwiZ2V0U3Vua1NoaXBzIiwiZmlsdGVyIiwicHJldmlld1NoaXBQbGFjZW1lbnQiLCJHYW1lQm9hcmRGYWN0b3J5IiwiYXJyYXlPZkhpdHMiLCJhdHRhY2siLCJlbmVteVBsYXllciIsImdldEJvYXJkIiwiYXR0YWNrUmFuZG9tUG9zaXRpb24iLCJyYW5kb21TaW5nbGVDb29yZCIsImdldFVuaXF1ZUNvb3JkcyIsInNvbWUiLCJlbCIsInVuaXF1ZUNvb3JkcyIsImdldE5hbWUiLCJuZXdOYW1lIiwiZGVsYXllZFJhbmRvbUF0dGFjayIsImRlbGF5IiwibXMiLCJyZXMiLCJzZXRUaW1lb3V0IiwiZ2FtZUxvb3AiLCJsYXN0VXNlZE5hbWUiLCJjdXJyZW50U2hpcElEIiwiZW5lbXkiLCJkaXNwbGF5TWFuYWdlciIsImxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQiLCJvbmVHYW1lVHVybiIsInBsYWNpbmdTaGlwcyIsIk51bWJlciIsImlzU2hpcFZlcnRpY2FsIiwicHJldkRhdGEiLCJuZXh0UGxheWVyIiwiY2hlY2tXaW5uZXIiLCJnZXRQbGF5ZXJOYW1lIiwicGxheWVyTmFtZU1vZGFsIiwiYXR0YWNrRGF0YSIsInBsYXllclR1cm4iLCJlbmVteUF0dGFja0RhdGEiLCJjb21wdXRlclR1cm4iLCJwbGF5Il0sInNvdXJjZVJvb3QiOiIifQ==