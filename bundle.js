(()=>{var t={666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var i=e&&e.prototype instanceof y?e:y,o=Object.create(i.prototype),a=new N(n||[]);return o._invoke=function(t,e,r){var n=u;return function(i,o){if(n===p)throw new Error("Generator is already running");if(n===m){if("throw"===i)throw o;return O()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=C(a,r);if(s){if(s===f)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===u)throw n=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=d(t,e,r);if("normal"===c.type){if(n=r.done?m:h,c.arg===f)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=m,r.method="throw",r.arg=c.arg)}}}(t,r,a),o}function d(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var u="suspendedStart",h="suspendedYield",p="executing",m="completed",f={};function y(){}function v(){}function w(){}var g={};c(g,o,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(A([])));E&&E!==r&&n.call(E,o)&&(g=E);var S=w.prototype=y.prototype=Object.create(g);function L(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){function r(i,o,a,s){var c=d(t[i],t,o);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==typeof u&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(u).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,i){r(t,n,e,i)}))}return i=i?i.then(o,o):o()}}function C(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method))return f;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var i=d(n,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,f;var o=i.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,f):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,f)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function A(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function r(){for(;++i<t.length;)if(n.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:O}}function O(){return{value:e,done:!0}}return v.prototype=w,c(S,"constructor",w),c(w,"constructor",v),v.displayName=c(w,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,c(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},L(b.prototype),c(b.prototype,a,(function(){return this})),t.AsyncIterator=b,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var a=new b(l(e,r,n,i),o);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},L(S),c(S,s,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(n,i){return s.type="throw",s.arg=t,r.next=n,i&&(r.method="next",r.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;P(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:A(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),f}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}(()=>{"use strict";function t(t,e,r){const n=document.createElement("div");n.classList.add("board-wrap");const i=document.createElement("div");i.classList.add("board");const o=document.createElement("h2");return o.textContent=`${t.name}'s fleet`,n.append(o,i),{getBoardDiv:()=>n,render:n=>{n.forEach(((n,o)=>{n.forEach(((n,a)=>{const s=function(t,e,r,n,i,o){const a=document.createElement("div");return a.classList.add("cell"),a.dataset.x=t,a.dataset.y=e,i&&a.addEventListener("click",(()=>i({x:a.dataset.x,y:a.dataset.y}))),o&&a.addEventListener("mouseenter",(()=>o({x:a.dataset.x,y:a.dataset.y}))),!1!==r.isShip&&"player"===n.type&&a.classList.add("ship"),!0===r.isPreview&&a.classList.add("preview"),!1===r.isShip&&!0===r.isHit&&(a.textContent="⬤"),!1!==r.isShip&&!0===r.isHit&&(a.textContent="⬤",a.classList.add("hit"),r.isShip.isSunk()&&a.classList.add("sunk")),a}(a,o,n,t,e,r);i.appendChild(s)}))}))},clean:()=>{i.textContent=""},setName:t=>(t=>{o.textContent=`${t}'s fleet`})(t)}}class e{constructor(){this.wrapper=document.createElement("div"),this.title=document.createElement("h2"),this.initialize()}initialize(){this.title.textContent="Destroyed ships",this.wrapper.classList.add("destroyed-ships-wrapper"),this.wrapper.appendChild(this.title)}appendShip(t){const e=document.createElement("div");e.classList.add("destroyed-ship");for(let r=0;r<t.getLength();r+=1){const t=document.createElement("div");t.classList.add("cell"),e.appendChild(t)}this.wrapper.appendChild(e)}getElement(){return this.wrapper}}const n=new class{constructor(){this.modal=document.querySelector(".modal"),this.content=document.createElement("div"),this.wrapper=document.createElement("div"),this.wrapper.classList.add("modal-box"),this.wrapper.addEventListener("click",(t=>t.stopPropagation())),this.wrapper.appendChild(this.content),this.modal.appendChild(this.wrapper)}addCloseIcon(){this.closeIcon=document.createElement("div"),this.closeIcon.classList.add("modal-close"),this.closeIcon.innerHTML+='<svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512"><title>Close</title><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M368 368L144 144M368 144L144 368"/></svg>',this.wrapper.appendChild(this.closeIcon)}showOwnPromise(t){this.content.appendChild(t),this.modal.classList.add("visible")}show(t){return new Promise((e=>{this.addCloseIcon(),this.content.appendChild(t),this.modal.classList.add("visible"),this.closeIcon.addEventListener("click",(()=>{e(),this.cleanModal()}))}))}cleanModal(){this.modal.classList.remove("visible"),this.content.innerText=""}},i=new class{constructor(){this.modal=n}async show(){return new Promise((t=>{let e;const r=document.createElement("div");r.classList.add("name-input-wrapper");const n=document.createElement("h2");n.textContent="Enter your name";const i=document.createElement("input");i.setAttribute("autofocus","");const o=document.createElement("span");o.textContent="Please use a name between 2 and 15 characters";const a=r=>{r.preventDefault(),i.checkValidity()?(o.style.display="none",i.classList.remove("invalid-input"),this.modal.cleanModal(),t(e)):(i.classList.add("invalid-input"),o.style.display="block")};i.placeholder="Your name",i.type="text",i.maxLength=15,i.minLength=2,i.addEventListener("input",(t=>{e=t.target.value})),i.addEventListener("keyup",(t=>{"Enter"===t.key&&a(t)}));const s=document.createElement("button");s.textContent="Submit",s.addEventListener("click",(t=>{a(t)}));const c=document.createElement("div");c.append(i,s),r.append(n,c,o),this.modal.showOwnPromise(r)}))}},o=[5,4,3,3,2],a=10;const s=new class{constructor(){this.modal=n}async announceWinner(t){const e=document.createElement("h2");e.textContent=`${t} has won the game!`,await this.modal.show(e)}};function c(r,n,a,c,l,d,u){let h=!1;const p=document.querySelector(".gamearea");p.textContent="";const m=new e,f=new e,y=function(t,e){let r=!1;const n=document.createElement("div");n.id="ship-picker",n.classList.add("board-wrap");const i=document.createElement("div");i.classList.add("shippicker");const a=document.createElement("div");a.classList.add("arrow-left");const s=document.createElement("h2");s.textContent="Place your fleet";const c=document.createElement("div");c.classList.add("current-ship-wrap");const l=document.createElement("button");l.textContent="Rotate ship",l.addEventListener("click",(()=>{r=!r,u(),t()}));const d=()=>{const t=o[e()],n=document.createElement("div");r&&n.classList.add("is-vertical"),n.classList.add("destroyed-ship","current-ship");for(let e=0;e<t;e+=1){const t=document.createElement("div");t.classList.add("cell"),n.appendChild(t)}return n},u=()=>{c.textContent="",n.textContent="",i.textContent="";const t=d();c.appendChild(t),i.append(a,s,l,c),n.append(i)};return{getBoardWrap:()=>n,displayCurrentShip:d,render:u}}(d,u),v=document.createElement("div");v.classList.add("boards-wrapper");const w=t({name:"Player",type:"player"},c,l),g=t({name:"Enemy",type:"enemy"},a);return(()=>{const t=m.getElement(),e=f.getElement();v.appendChild(w.getBoardDiv()),v.appendChild(y.getBoardWrap()),p.append(t,v,e),y.displayCurrentShip()})(),{renderBoards:()=>{w.clean(),g.clean(),w.render(r.getArray()),g.render(n.getArray()),y.render()},appendDestroyedShip:(t,e)=>{switch(e){case"player":m.appendShip(t);break;case"enemy":f.appendShip(t)}},handleWin:async t=>{h||(h=!0,await s.announceWinner(t),h=!1)},showNameModal:async()=>{let t;return h||(h=!0,t=await i.show(),h=!1),t||"Player"},switchToEnemyBoard:()=>{document.getElementById("ship-picker").remove(),v.appendChild(g.getBoardDiv())},setPlayerName:t=>w.setName(t)}}r(666);class l extends Error{constructor(t){super(t),this.name="OverlapError"}}class d extends Error{constructor(t){super(t),this.name="OutOfBoundsError"}}function u(t){let e=t;const r=function(){const t=[],e=function(t,e){const r=[];return(()=>{for(let n=0;n<t;n+=1)r.push(new Array(t).fill(e))})(),{setSingleCellObject:(e,n,i)=>{if(e<t&&n<t)return r[n][e]=i,!0;throw new Error("Coordinates out of bounds")},getArray:()=>r,getSingleValue:(e,n)=>{if(e<t&&n<t)return r[n][e];throw new Error("Coordinates out of bounds")},writeSingleCellKeyPair:(e,n,i,o)=>{if(e<t&&n<t){const t={...r[n][e]};t[i]=o,r[n][e]=t}}}}(a,{isShip:!1,isHit:!1,isPreview:!1});let r=[];const n=(t,r,n,i)=>{const o=[];for(let s=0;s<i;s+=1){let i,c;if(n?(i=r+s,c=t):(i=r,c=t+s),i>=a||c>=a)throw new d("Ship doesn't fit the gameboard");if(!1!==e.getSingleValue(c,i).isShip)throw new l("Ship overlaps already existing ship");o.push({xAxis:c,yAxis:i})}return o},i=async()=>{await r.forEach((t=>{e.writeSingleCellKeyPair(t.xAxis,t.yAxis,"isPreview",!1)}))},o=(r,i,o,a)=>{const s=function(t){let e=0;return{hit:()=>(e+=1,!0),isSunk:()=>e===t,getLength:()=>t}}(a);return n(r,i,o,a).forEach((t=>{e.setSingleCellObject(t.xAxis,t.yAxis,{isShip:s,isHit:!1})})),t.push(s),s};return{placeShip:o,receiveAttack:(t,r)=>{const n=e.getSingleValue(t,r);let i={};if(!0===n.isHit)throw new Error("Cannot hit the same place twice");return!1!==n.isShip&&!1===n.isHit&&(n.isShip.hit(),i={isShip:n.isShip,isHit:!0,isSunk:n.isShip.isSunk()}),!1===n.isShip&&!1===n.isHit&&(i={isShip:!1,isHit:!0}),e.setSingleCellObject(t,r,i),i},areAllShipsSunk:()=>t.every((t=>t.isSunk())),getArray:()=>e.getArray(),autoPlaceShips:t=>(t.forEach((t=>{const e=()=>{const e=Math.random()<.5,{x:r,y:n}=((t,e)=>{let r,n;return t?(n=Math.floor(Math.random()*(a-e)),r=Math.floor(Math.random()*a)):(r=Math.floor(Math.random()*(a-e)),n=Math.floor(Math.random()*a)),{x:r,y:n}})(e,t);try{o(r,n,e,t)}catch(t){return"error"}};let r,n=100;do{if(r=e(),n-=1,n<=0)throw new Error("Couldn't autoplace your ships (max retries exceeded)")}while("error"===r)})),!0),getSunkShips:()=>t.filter((t=>t.isSunk())),previewShipPlacement:(t,o,a,s)=>{i();const c=n(t,o,a,s);r=c,c.forEach((t=>{e.writeSingleCellKeyPair(t.xAxis,t.yAxis,"isPreview",!0)}))},cleanPreviousShipPreview:i}}(),n=[],i=(t,e,r)=>{const i=r.getBoard();return n.push({x:t,y:e}),i.receiveAttack(t,e)},o=t=>{if(n>=100)return;const e=()=>Math.floor(10*Math.random()),r=()=>{let t={x:e(),y:e()};return(t=>n.some((e=>e.x===t.x&&e.y===t.y)))(t)&&(t=r()),t},o=r();return i(o.x,o.y,t)};return{getName:()=>e,setName:t=>{e=t},getBoard:()=>r,attack:i,attackRandomPosition:o,delayedRandomAttack:async(t,e)=>{var r;return await(r=t,new Promise((t=>setTimeout(t,r)))),o(e)}}}async function h(t){return new Promise((e=>{let r=0;const n=u("placeholder"),i=u("Computer"),a=n.getBoard(),s=i.getBoard(),l=c(a,s,(function(t){d&&y(t)}),(async function(t){if(p){if(r<o.length)try{a.placeShip(Number(t.x),Number(t.y),m,o[r]),r+=1}catch(t){"OutOfBoundsError"===t.name||t.name}r===o.length&&(p=!1,r=0,d=!0,await a.cleanPreviousShipPreview(),l.switchToEnemyBoard(),l.renderBoards())}}),(function(t){if(p&&(v?.x!==t.x||v?.y!==t.y))try{a.previewShipPlacement(Number(t.x),Number(t.y),m,o[r]),l.renderBoards(),v={...t}}catch(t){}}),(function(){m=!m}),(function(){return r}));let d=!1,h="player",p=!0,m=!1;async function f(){!0===a.areAllShipsSunk()&&(await l.handleWin(i.getName()),e(n.getName())),!0===s.areAllShipsSunk()&&(await l.handleWin(n.getName()),e(n.getName()))}t?(n.setName(t),l.setPlayerName(t)):async function(){const t=await async function(){return await l.showNameModal()}();n.setName(t),l.setPlayerName(t)}();const y=async t=>{try{d&&"player"===h&&(h=await(async t=>{const e=await n.attack(t.x,t.y,i);return f(),l.renderBoards(),!0===e?.isSunk&&l.appendDestroyedShip(e.isShip,"enemy"),!1!==e?.isShip?"player":"computer"})(t)),"computer"===h&&(d=!1,h=await(async()=>{const t=await i.delayedRandomAttack(250,n);return f(),l.renderBoards(),!0===t?.isSunk&&l.appendDestroyedShip(t.isShip,"player"),!1!==t?.isShip?"computer":"player"})(),"computer"===h&&y(""),d=!0)}catch(t){}};let v;s.autoPlaceShips(o),l.renderBoards()}))}!async function(){let t;for(;;)t=await h(t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0EsT0EvQmE5TixPQUFPaUwsSUFDeEIsTUFBTWlELFFBQW1CcEYsRUFBT3FELE9BQU9sQixFQUFLM0gsRUFBRzJILEVBQUs3SCxFQUFHa0ssR0FNdkQsT0FMQVMsSUFDQVIsRUFBZTVFLGdCQUNZLElBQXZCdUYsR0FBWXBLLFFBQ2R5SixFQUFlMUUsb0JBQW9CcUYsRUFBV3ZLLE9BQVEsVUFFN0IsSUFBdkJ1SyxHQUFZdkssT0FDUCxTQUVGLFlBcUJnQndLLENBQVdsRCxJQUViLGFBQWY2QyxJQUNGTixHQUE0QixFQUM1Qk0sT0F0QmU5TixXQUNuQixNQUFNb08sUUFBd0JkLEVBQU1SLG9CVDFFbEIsSVMwRWdEaEUsR0FRbEUsT0FQQWlGLElBQ0FSLEVBQWU1RSxnQkFFaUIsSUFBNUJ5RixHQUFpQnRLLFFBQ25CeUosRUFBZTFFLG9CQUFvQnVGLEVBQWdCekssT0FBUSxXQUc3QixJQUE1QnlLLEdBQWlCekssT0FDWixXQUVGLFVBVWdCMEssR0FDQSxhQUFmUCxHQUNGTCxFQUFZLElBRWRELEdBQTRCLEdBRTlCLE1BQU8zUCxNQUtYLElBQUlnUSxFQXNESjlHLEVBQVdxRSxlQUFlMUUsR0FDMUI2RyxFQUFlNUUsbUJBSUozSSxpQkFDYixJQUFJb04sRUFDSixPQUdFQSxRQUFxQkQsRUFBU0MsR0MzS2xDa0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vQ29tcG9uZW50cy9Cb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9Db21wb25lbnRzL0NlbGwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vQ29tcG9uZW50cy9EZXN0cm95ZWRTaGlwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9Db21wb25lbnRzL01vZGFsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvQ2xvc2VJY29uLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvTmFtZUlucHV0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvQ09OU1RBTlRTLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tL0NvbXBvbmVudHMvV2lubmVyQW5vdW5jZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vRE9NbWFuYWdlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9Db21wb25lbnRzL1NoaXBQaWNrZXJCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvR2FtZWJvYXJkL0N1c3RvbUVycm9ycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvUGxheWVyL1BsYXllckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL0dhbWVib2FyZC9HYW1lYm9hcmRGYWN0b3J5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9IZWxwZXJzL0FycmF5MmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL1NoaXAvU2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImltcG9ydCBDZWxsIGZyb20gJy4vQ2VsbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJvYXJkKGJvYXJkRGF0YSwgaGFuZGxlQ2VsbENsaWNrLCBoYW5kbGVDZWxsSG92ZXIpIHtcbiAgY29uc3QgYm9hcmRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJvYXJkV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdib2FyZC13cmFwJyk7XG4gIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJvYXJkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gIGNvbnN0IGJvYXJkSGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIGJvYXJkSGVhZGluZy50ZXh0Q29udGVudCA9IGAke2JvYXJkRGF0YS5uYW1lfSdzIGZsZWV0YDtcblxuICBjb25zdCBjaGFuZ2VIZWFkaW5nTmFtZSA9IChuYW1lKSA9PiB7XG4gICAgYm9hcmRIZWFkaW5nLnRleHRDb250ZW50ID0gYCR7bmFtZX0ncyBmbGVldGA7XG4gIH07XG5cbiAgY29uc3Qgc2V0TmFtZSA9IChuYW1lKSA9PiBjaGFuZ2VIZWFkaW5nTmFtZShuYW1lKTtcblxuICBjb25zdCBjbGVhbiA9ICgpID0+IHtcbiAgICBib2FyZC50ZXh0Q29udGVudCA9ICcnO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlciA9IChhcnJheSkgPT4ge1xuICAgIGFycmF5LmZvckVhY2goKHJvd0RhdGEsIHkpID0+IHtcbiAgICAgIHJvd0RhdGEuZm9yRWFjaCgoY2VsbERhdGEsIHgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudENlbGwgPSBDZWxsKHgsIHksIGNlbGxEYXRhLCBib2FyZERhdGEsIGhhbmRsZUNlbGxDbGljaywgaGFuZGxlQ2VsbEhvdmVyKTtcbiAgICAgICAgYm9hcmQuYXBwZW5kQ2hpbGQoY3VycmVudENlbGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgYm9hcmRXcmFwcGVyLmFwcGVuZChib2FyZEhlYWRpbmcsIGJvYXJkKTtcblxuICBjb25zdCBnZXRCb2FyZERpdiA9ICgpID0+IGJvYXJkV3JhcHBlcjtcblxuICByZXR1cm4geyBnZXRCb2FyZERpdiwgcmVuZGVyLCBjbGVhbiwgc2V0TmFtZSB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2VsbCh4LCB5LCBjZWxsRGF0YSwgYm9hcmREYXRhLCBoYW5kbGVDZWxsQ2xpY2ssIGhhbmRsZUNlbGxIb3Zlcikge1xuICBjb25zdCBjZWxsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY2VsbEVsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgY2VsbEVsLmRhdGFzZXQueCA9IHg7XG4gIGNlbGxFbC5kYXRhc2V0LnkgPSB5O1xuXG4gIGlmIChoYW5kbGVDZWxsQ2xpY2spIHtcbiAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVDZWxsQ2xpY2soeyB4OiBjZWxsRWwuZGF0YXNldC54LCB5OiBjZWxsRWwuZGF0YXNldC55IH0pKTtcbiAgfVxuXG4gIGlmIChoYW5kbGVDZWxsSG92ZXIpIHtcbiAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IGhhbmRsZUNlbGxIb3Zlcih7IHg6IGNlbGxFbC5kYXRhc2V0LngsIHk6IGNlbGxFbC5kYXRhc2V0LnkgfSkpO1xuICB9XG5cbiAgaWYgKGNlbGxEYXRhLmlzU2hpcCAhPT0gZmFsc2UgJiYgYm9hcmREYXRhLnR5cGUgPT09ICdwbGF5ZXInKSB7XG4gICAgY2VsbEVsLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgfVxuXG4gIGlmIChjZWxsRGF0YS5pc1ByZXZpZXcgPT09IHRydWUpIHtcbiAgICBjZWxsRWwuY2xhc3NMaXN0LmFkZCgncHJldmlldycpO1xuICB9XG5cbiAgaWYgKGNlbGxEYXRhLmlzU2hpcCA9PT0gZmFsc2UgJiYgY2VsbERhdGEuaXNIaXQgPT09IHRydWUpIHtcbiAgICBjZWxsRWwudGV4dENvbnRlbnQgPSAn4qykJztcbiAgfVxuICBpZiAoY2VsbERhdGEuaXNTaGlwICE9PSBmYWxzZSAmJiBjZWxsRGF0YS5pc0hpdCA9PT0gdHJ1ZSkge1xuICAgIGNlbGxFbC50ZXh0Q29udGVudCA9ICfirKQnO1xuICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcblxuICAgIGlmIChjZWxsRGF0YS5pc1NoaXAuaXNTdW5rKCkpIHtcbiAgICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKCdzdW5rJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNlbGxFbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERlc3Ryb3llZFNoaXBzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy53cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy50aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMudGl0bGUudGV4dENvbnRlbnQgPSAnRGVzdHJveWVkIHNoaXBzJztcbiAgICB0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZGVzdHJveWVkLXNoaXBzLXdyYXBwZXInKTtcbiAgICB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy50aXRsZSk7XG4gIH1cblxuICBhcHBlbmRTaGlwKHNoaXApIHtcbiAgICBjb25zdCBzaGlwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNoaXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rlc3Ryb3llZC1zaGlwJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG4gICAgICBzaGlwRWxlbWVudC5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICB9XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHNoaXBFbGVtZW50KTtcbiAgfVxuXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxufVxuIiwiaW1wb3J0IGNsb3NlSWNvbiBmcm9tICcuL0Nsb3NlSWNvbic7XG5pbXBvcnQgJy4vc3R5bGVzL01vZGFsLmNzcyc7XG5cbmNsYXNzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCcpO1xuICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgdGhpcy53cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWJveCcpO1xuICAgIHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpKTtcblxuICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnQpO1xuXG4gICAgdGhpcy5tb2RhbC5hcHBlbmRDaGlsZCh0aGlzLndyYXBwZXIpO1xuICB9XG5cbiAgYWRkQ2xvc2VJY29uKCkge1xuICAgIHRoaXMuY2xvc2VJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jbG9zZUljb24uY2xhc3NMaXN0LmFkZCgnbW9kYWwtY2xvc2UnKTtcbiAgICB0aGlzLmNsb3NlSWNvbi5pbm5lckhUTUwgKz0gY2xvc2VJY29uO1xuICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmNsb3NlSWNvbik7XG4gIH1cblxuICBzaG93T3duUHJvbWlzZShlbGVtZW50KSB7XG4gICAgdGhpcy5jb250ZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xuICB9XG5cbiAgc2hvdyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmFkZENsb3NlSWNvbigpO1xuICAgICAgdGhpcy5jb250ZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XG4gICAgICB0aGlzLmNsb3NlSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLmNsZWFuTW9kYWwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYW5Nb2RhbCgpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcbiAgICB0aGlzLmNvbnRlbnQuaW5uZXJUZXh0ID0gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IE1vZGFsKCk7XG4iLCJjb25zdCBjbG9zZUljb24gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgY2xhc3M9XCJpb25pY29uXCIgdmlld0JveD1cIjAgMCA1MTIgNTEyXCI+PHRpdGxlPkNsb3NlPC90aXRsZT48cGF0aCBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjMyXCIgZD1cIk0zNjggMzY4TDE0NCAxNDRNMzY4IDE0NEwxNDQgMzY4XCIvPjwvc3ZnPic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsb3NlSWNvbjtcbiIsImltcG9ydCBNb2RhbCBmcm9tICcuL01vZGFsJztcblxuY2xhc3MgRW50ZXJOYW1lIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tb2RhbCA9IE1vZGFsO1xuICB9XG5cbiAgYXN5bmMgc2hvdygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGxldCBuYW1lO1xuICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCduYW1lLWlucHV0LXdyYXBwZXInKTtcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gJ0VudGVyIHlvdXIgbmFtZSc7XG4gICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9mb2N1cycsICcnKTtcbiAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSAnUGxlYXNlIHVzZSBhIG5hbWUgYmV0d2VlbiAyIGFuZCAxNSBjaGFyYWN0ZXJzJztcblxuICAgICAgY29uc3QgaGFuZGxlU3VibWl0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChpbnB1dC5jaGVja1ZhbGlkaXR5KCkpIHtcbiAgICAgICAgICBsYWJlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2ludmFsaWQtaW5wdXQnKTtcbiAgICAgICAgICB0aGlzLm1vZGFsLmNsZWFuTW9kYWwoKTtcbiAgICAgICAgICByZXNvbHZlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQtaW5wdXQnKTtcbiAgICAgICAgICBsYWJlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSAnWW91ciBuYW1lJztcbiAgICAgIGlucHV0LnR5cGUgPSAndGV4dCc7XG4gICAgICBpbnB1dC5tYXhMZW5ndGggPSAxNTtcbiAgICAgIGlucHV0Lm1pbkxlbmd0aCA9IDI7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xuICAgICAgICBuYW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgfSk7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgaGFuZGxlU3VibWl0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gJ1N1Ym1pdCc7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaGFuZGxlU3VibWl0KGV2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpbnB1dEJ1dHRvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGlucHV0QnV0dG9uV3JhcHBlci5hcHBlbmQoaW5wdXQsIGJ1dHRvbik7XG4gICAgICB3cmFwcGVyLmFwcGVuZCh0aXRsZSwgaW5wdXRCdXR0b25XcmFwcGVyLCBsYWJlbCk7XG4gICAgICB0aGlzLm1vZGFsLnNob3dPd25Qcm9taXNlKHdyYXBwZXIpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBFbnRlck5hbWUoKTtcbiIsIi8vIEdhbWUgd2lsbCBiZSBwbGF5ZWQgd2l0aCBzaGlwcyBvZiB0aGVzZSBsZW5ndGhzXG5leHBvcnQgY29uc3QgU0hJUF9MRU5HVEhTID0gWzUsIDQsIDMsIDMsIDJdO1xuXG4vLyBBSSBtb3ZlIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuZXhwb3J0IGNvbnN0IEFJX0RFTEFZID0gMjUwO1xuXG4vLyB0aGUgc2l6ZSBvZiB0aGUgZ2FtZWJvYXJkXG5leHBvcnQgY29uc3QgRURHRV9TSVpFID0gMTA7XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSAnLi9Nb2RhbCc7XG5cbmNsYXNzIFdpbm5lckFub3VuY2VtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tb2RhbCA9IE1vZGFsO1xuICB9XG5cbiAgYXN5bmMgYW5ub3VuY2VXaW5uZXIobmFtZSkge1xuICAgIGNvbnN0IGFubm91bmNlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgYW5ub3VuY2VtZW50LnRleHRDb250ZW50ID0gYCR7bmFtZX0gaGFzIHdvbiB0aGUgZ2FtZSFgO1xuICAgIGF3YWl0IHRoaXMubW9kYWwuc2hvdyhhbm5vdW5jZW1lbnQpO1xuICB9XG59XG5cbmNvbnN0IFdpbm5lck1vZGFsID0gbmV3IFdpbm5lckFub3VuY2VtZW50KCk7XG5leHBvcnQgZGVmYXVsdCBXaW5uZXJNb2RhbDtcbiIsImltcG9ydCBCb2FyZCBmcm9tICcuL0NvbXBvbmVudHMvQm9hcmQnO1xuaW1wb3J0IERlc3Ryb3llZFNoaXBzIGZyb20gJy4vQ29tcG9uZW50cy9EZXN0cm95ZWRTaGlwcyc7XG5pbXBvcnQgRW50ZXJOYW1lIGZyb20gJy4vQ29tcG9uZW50cy9OYW1lSW5wdXQnO1xuaW1wb3J0IFNoaXBQaWNrZXJCb2FyZCBmcm9tICcuL0NvbXBvbmVudHMvU2hpcFBpY2tlckJvYXJkJztcbmltcG9ydCBXaW5uZXJNb2RhbCBmcm9tICcuL0NvbXBvbmVudHMvV2lubmVyQW5vdW5jZW1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBET01tYW5hZ2VyKFxuICBwbGF5ZXJCb2FyZCxcbiAgZW5lbXlCb2FyZCxcbiAgaGFuZGxlRW5lbXlDZWxsQ2xpY2ssXG4gIGhhbmRsZVBsYXllckNlbGxDbGljayxcbiAgaGFuZGxlUGxheWVyQ2VsbEhvdmVyLFxuICByb3RhdGVIYW5kbGVyLFxuICBnZXRDdXJyZW50U2hpcElELFxuKSB7XG4gIGxldCBzaG93aW5nTW9kYWwgPSBmYWxzZTtcbiAgY29uc3QgZ2FtZWFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZWFyZWEnKTtcbiAgZ2FtZWFyZWEudGV4dENvbnRlbnQgPSAnJztcbiAgY29uc3QgcGxheWVyRGVzdHJveWVkU2hpcHNET00gPSBuZXcgRGVzdHJveWVkU2hpcHMoKTtcbiAgY29uc3QgZW5lbXlEZXN0cm95ZWRTaGlwc0RPTSA9IG5ldyBEZXN0cm95ZWRTaGlwcygpO1xuICBjb25zdCBzaGlwUGlja2VyQm9hcmQgPSBTaGlwUGlja2VyQm9hcmQocm90YXRlSGFuZGxlciwgZ2V0Q3VycmVudFNoaXBJRCk7XG4gIGNvbnN0IGJvYXJkc1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm9hcmRzV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdib2FyZHMtd3JhcHBlcicpO1xuICBjb25zdCBwbGF5ZXJCb2FyZERPTSA9IEJvYXJkKFxuICAgIHtcbiAgICAgIG5hbWU6ICdQbGF5ZXInLFxuICAgICAgdHlwZTogJ3BsYXllcicsXG4gICAgfSxcbiAgICBoYW5kbGVQbGF5ZXJDZWxsQ2xpY2ssXG4gICAgaGFuZGxlUGxheWVyQ2VsbEhvdmVyLFxuICApO1xuICBjb25zdCBlbmVteUJvYXJkRE9NID0gQm9hcmQoXG4gICAge1xuICAgICAgbmFtZTogJ0VuZW15JyxcbiAgICAgIHR5cGU6ICdlbmVteScsXG4gICAgfSxcbiAgICBoYW5kbGVFbmVteUNlbGxDbGljayxcbiAgKTtcblxuICBjb25zdCBzZXRQbGF5ZXJOYW1lID0gKG5hbWUpID0+IHBsYXllckJvYXJkRE9NLnNldE5hbWUobmFtZSk7XG5cbiAgY29uc3QgaW5pdGlhbGl6ZSA9ICgpID0+IHtcbiAgICBjb25zdCBwbGF5ZXJEZXN0cm95ZWRTaGlwcyA9IChwbGF5ZXJEZXN0cm95ZWRTaGlwc0RPTS5nZXRFbGVtZW50KCkpO1xuICAgIGNvbnN0IGVuZW15RGVzdHJveWVkU2hpcHMgPSAoZW5lbXlEZXN0cm95ZWRTaGlwc0RPTS5nZXRFbGVtZW50KCkpO1xuXG4gICAgYm9hcmRzV3JhcHBlci5hcHBlbmRDaGlsZChwbGF5ZXJCb2FyZERPTS5nZXRCb2FyZERpdigpKTtcbiAgICBib2FyZHNXcmFwcGVyLmFwcGVuZENoaWxkKHNoaXBQaWNrZXJCb2FyZC5nZXRCb2FyZFdyYXAoKSk7XG4gICAgZ2FtZWFyZWEuYXBwZW5kKHBsYXllckRlc3Ryb3llZFNoaXBzLCBib2FyZHNXcmFwcGVyLCBlbmVteURlc3Ryb3llZFNoaXBzKTtcbiAgICBzaGlwUGlja2VyQm9hcmQuZGlzcGxheUN1cnJlbnRTaGlwKCk7XG4gIH07XG4gIGluaXRpYWxpemUoKTtcblxuICBjb25zdCBzd2l0Y2hUb0VuZW15Qm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hpcFBpY2tlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaGlwLXBpY2tlcicpO1xuICAgIHNoaXBQaWNrZXIucmVtb3ZlKCk7XG4gICAgYm9hcmRzV3JhcHBlci5hcHBlbmRDaGlsZChlbmVteUJvYXJkRE9NLmdldEJvYXJkRGl2KCkpO1xuICB9O1xuXG4gIGNvbnN0IHNob3dXaW5Nb2RhbCA9IGFzeW5jIChuYW1lKSA9PiB7XG4gICAgaWYgKCFzaG93aW5nTW9kYWwpIHtcbiAgICAgIHNob3dpbmdNb2RhbCA9IHRydWU7XG4gICAgICBhd2FpdCBXaW5uZXJNb2RhbC5hbm5vdW5jZVdpbm5lcihuYW1lKTtcbiAgICAgIHNob3dpbmdNb2RhbCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzaG93TmFtZU1vZGFsID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBuYW1lO1xuICAgIGlmICghc2hvd2luZ01vZGFsKSB7XG4gICAgICBzaG93aW5nTW9kYWwgPSB0cnVlO1xuICAgICAgbmFtZSA9IGF3YWl0IEVudGVyTmFtZS5zaG93KCk7XG4gICAgICBzaG93aW5nTW9kYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgfHwgJ1BsYXllcic7XG4gIH07XG5cbiAgY29uc3QgY2xlYW5Cb2FyZHMgPSAoKSA9PiB7XG4gICAgcGxheWVyQm9hcmRET00uY2xlYW4oKTtcbiAgICBlbmVteUJvYXJkRE9NLmNsZWFuKCk7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyQm9hcmRzID0gKCkgPT4ge1xuICAgIGNsZWFuQm9hcmRzKCk7XG4gICAgcGxheWVyQm9hcmRET00ucmVuZGVyKHBsYXllckJvYXJkLmdldEFycmF5KCkpO1xuICAgIGVuZW15Qm9hcmRET00ucmVuZGVyKGVuZW15Qm9hcmQuZ2V0QXJyYXkoKSk7XG5cbiAgICBzaGlwUGlja2VyQm9hcmQucmVuZGVyKCk7XG4gIH07XG5cbiAgY29uc3QgYXBwZW5kRGVzdHJveWVkU2hpcCA9IChzaGlwLCBwbGF5ZXIpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXG4gICAgc3dpdGNoIChwbGF5ZXIpIHtcbiAgICAgIGNhc2UgJ3BsYXllcic6XG4gICAgICAgIHBsYXllckRlc3Ryb3llZFNoaXBzRE9NLmFwcGVuZFNoaXAoc2hpcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZW5lbXknOlxuICAgICAgICBlbmVteURlc3Ryb3llZFNoaXBzRE9NLmFwcGVuZFNoaXAoc2hpcCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckJvYXJkcyxcbiAgICBhcHBlbmREZXN0cm95ZWRTaGlwLFxuICAgIGhhbmRsZVdpbjogc2hvd1dpbk1vZGFsLFxuICAgIHNob3dOYW1lTW9kYWwsXG4gICAgc3dpdGNoVG9FbmVteUJvYXJkLFxuICAgIHNldFBsYXllck5hbWUsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBTSElQX0xFTkdUSFMgfSBmcm9tICcuLi8uLi9DT05TVEFOVFMnO1xuaW1wb3J0ICcuL3N0eWxlcy9TaGlwUGlja2VyQm9hcmQuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2hpcFBpY2tlckJvYXJkKHJvdGF0ZUhhbmRsZXIsIGdldEN1cnJlbnRTaGlwSUQpIHtcbiAgbGV0IGlzVmVydGljYWwgPSBmYWxzZTtcblxuICBjb25zdCBib2FyZFdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm9hcmRXcmFwLmlkID0gJ3NoaXAtcGlja2VyJztcbiAgYm9hcmRXcmFwLmNsYXNzTGlzdC5hZGQoJ2JvYXJkLXdyYXAnKTtcblxuICBjb25zdCBzaGlwUGlja2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNoaXBQaWNrZXIuY2xhc3NMaXN0LmFkZCgnc2hpcHBpY2tlcicpO1xuXG4gIGNvbnN0IGFycm93TGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBhcnJvd0xlZnQuY2xhc3NMaXN0LmFkZCgnYXJyb3ctbGVmdCcpO1xuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgdGl0bGUudGV4dENvbnRlbnQgPSAnUGxhY2UgeW91ciBmbGVldCc7XG5cbiAgY29uc3QgY3VycmVudFNoaXBXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGN1cnJlbnRTaGlwV3JhcC5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LXNoaXAtd3JhcCcpO1xuXG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBidXR0b24udGV4dENvbnRlbnQgPSAnUm90YXRlIHNoaXAnO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaXNWZXJ0aWNhbCA9ICFpc1ZlcnRpY2FsO1xuICAgIHJlbmRlcigpO1xuICAgIHJvdGF0ZUhhbmRsZXIoKTtcbiAgfSk7XG5cbiAgY29uc3QgZ2V0Q3VycmVudFNoaXBET00gPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFNoaXBMZW5ndGggPSBTSElQX0xFTkdUSFNbZ2V0Q3VycmVudFNoaXBJRCgpXTtcbiAgICBjb25zdCBzaGlwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy12ZXJ0aWNhbCcpO1xuICAgIH1cbiAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdkZXN0cm95ZWQtc2hpcCcsICdjdXJyZW50LXNoaXAnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG4gICAgICBzaGlwRWxlbWVudC5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoaXBFbGVtZW50O1xuICB9O1xuXG4gIGNvbnN0IGNsZWFuID0gKCkgPT4ge1xuICAgIGN1cnJlbnRTaGlwV3JhcC50ZXh0Q29udGVudCA9ICcnO1xuICAgIGJvYXJkV3JhcC50ZXh0Q29udGVudCA9ICcnO1xuICAgIHNoaXBQaWNrZXIudGV4dENvbnRlbnQgPSAnJztcbiAgfTtcbiAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGNsZWFuKCk7XG4gICAgY29uc3QgY3VycmVudFNoaXAgPSBnZXRDdXJyZW50U2hpcERPTSgpO1xuICAgIGN1cnJlbnRTaGlwV3JhcC5hcHBlbmRDaGlsZChjdXJyZW50U2hpcCk7XG4gICAgc2hpcFBpY2tlci5hcHBlbmQoYXJyb3dMZWZ0LCB0aXRsZSwgYnV0dG9uLCBjdXJyZW50U2hpcFdyYXApO1xuICAgIGJvYXJkV3JhcC5hcHBlbmQoc2hpcFBpY2tlcik7XG4gIH07XG5cbiAgY29uc3QgZ2V0Qm9hcmRXcmFwID0gKCkgPT4gYm9hcmRXcmFwO1xuXG4gIHJldHVybiB7IGdldEJvYXJkV3JhcCwgZGlzcGxheUN1cnJlbnRTaGlwOiBnZXRDdXJyZW50U2hpcERPTSwgcmVuZGVyIH07XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuZXhwb3J0IGNsYXNzIE92ZXJsYXBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdPdmVybGFwRXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPdXRPZkJvdW5kc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ091dE9mQm91bmRzRXJyb3InO1xuICB9XG59XG4iLCJpbXBvcnQgR2FtZUJvYXJkRmFjdG9yeSBmcm9tICcuLi9HYW1lYm9hcmQvR2FtZWJvYXJkRmFjdG9yeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYXllckZhY3RvcnkobmFtZSkge1xuICBsZXQgcGxheWVyTmFtZSA9IG5hbWU7XG4gIGNvbnN0IGJvYXJkID0gR2FtZUJvYXJkRmFjdG9yeSgpO1xuICBjb25zdCBhcnJheU9mSGl0cyA9IFtdO1xuXG4gIGNvbnN0IGdldE5hbWUgPSAoKSA9PiBwbGF5ZXJOYW1lO1xuICBjb25zdCBzZXROYW1lID0gKG5ld05hbWUpID0+IHtcbiAgICBwbGF5ZXJOYW1lID0gbmV3TmFtZTtcbiAgfTtcbiAgY29uc3QgZ2V0Qm9hcmQgPSAoKSA9PiBib2FyZDtcblxuICBjb25zdCBhdHRhY2sgPSAoeCwgeSwgZW5lbXlQbGF5ZXIpID0+IHtcbiAgICBjb25zdCBlbmVteUJvYXJkID0gZW5lbXlQbGF5ZXIuZ2V0Qm9hcmQoKTtcbiAgICBhcnJheU9mSGl0cy5wdXNoKHsgeCwgeSB9KTtcbiAgICByZXR1cm4gZW5lbXlCb2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICB9O1xuXG4gIC8qKlxuICAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggeCBhbmQgeSBjb29yZHMgdGhhdCBoYXZlIG5vdCBiZWVuIGhpdCBiZWZvcmUuXG4gICogQHBhcmFtIHtvYmplY3R9IGNvb3JkcyBPYmplY3Qgd2l0aCB4IGFuZCB5IGtleXMgKGNvb3JkaW5hdGVzKS5cbiAgKi9cbiAgY29uc3Qgd2FzQWxyZWFkeUhpdCA9IChjb29yZHMpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhcnJheU9mSGl0cy5zb21lKChlbCkgPT4ge1xuICAgICAgaWYgKGVsLnggPT09IGNvb3Jkcy54ICYmIGVsLnkgPT09IGNvb3Jkcy55KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29uc3QgYXR0YWNrUmFuZG9tUG9zaXRpb24gPSAoZW5lbXlQbGF5ZXIpID0+IHtcbiAgICBpZiAoYXJyYXlPZkhpdHMgPj0gMTAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJhbmRvbVNpbmdsZUNvb3JkID0gKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuXG4gICAgY29uc3QgcmFuZG9tQ29vcmRzID0gKCkgPT4gKHtcbiAgICAgIHg6IHJhbmRvbVNpbmdsZUNvb3JkKCksXG4gICAgICB5OiByYW5kb21TaW5nbGVDb29yZCgpLFxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggeCBhbmQgeSBjb29yZHMgdGhhdCBoYXZlIG5vdCBiZWVuIGhpdCBiZWZvcmUuXG4gICAqL1xuICAgIGNvbnN0IGdldFVuaXF1ZUNvb3JkcyA9ICgpID0+IHtcbiAgICAgIGxldCBjb29yZHMgPSByYW5kb21Db29yZHMoKTtcbiAgICAgIGlmICgod2FzQWxyZWFkeUhpdChjb29yZHMpKSkge1xuICAgICAgICBjb29yZHMgPSBnZXRVbmlxdWVDb29yZHMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfTtcblxuICAgIGNvbnN0IHVuaXF1ZUNvb3JkcyA9IGdldFVuaXF1ZUNvb3JkcygpO1xuXG4gICAgY29uc3QgYXR0YWNrRGF0YSA9IGF0dGFjayh1bmlxdWVDb29yZHMueCwgdW5pcXVlQ29vcmRzLnksIGVuZW15UGxheWVyKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICByZXR1cm4gYXR0YWNrRGF0YTtcbiAgfTtcblxuICBsZXQgcHJldmlvdXNIaXQ7XG4gIGNvbnN0IHNtYXJ0QXR0YWNrID0gKGVuZW15UGxheWVyKSA9PiB7XG4gICAgaWYgKHByZXZpb3VzSGl0KSB7XG4gICAgICBjb25zdCB7IHgsIHkgfSA9IHByZXZpb3VzSGl0O1xuXG4gICAgICBhdHRhY2soeCArIDEsIHksIGVuZW15UGxheWVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJldmlvdXNIaXQgPSBhdHRhY2tSYW5kb21Qb3NpdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBkZWxheWVkUmFuZG9tQXR0YWNrID0gYXN5bmMgKGRlbGF5LCBwbGF5ZXIpID0+IHtcbiAgICBjb25zdCB0aW1lciA9IChtcykgPT4gbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIG1zKSk7XG4gICAgYXdhaXQgdGltZXIoZGVsYXkpO1xuICAgIHJldHVybiBhdHRhY2tSYW5kb21Qb3NpdGlvbihwbGF5ZXIpO1xuICB9O1xuICByZXR1cm4gKHtcbiAgICBnZXROYW1lLFxuICAgIHNldE5hbWUsXG4gICAgZ2V0Qm9hcmQsXG4gICAgYXR0YWNrLFxuICAgIGF0dGFja1JhbmRvbVBvc2l0aW9uLFxuICAgIGRlbGF5ZWRSYW5kb21BdHRhY2ssXG4gIH0pO1xufVxuIiwiaW1wb3J0ICdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnO1xuaW1wb3J0IEFycmF5MkQgZnJvbSAnLi4vSGVscGVycy9BcnJheTJkJztcbmltcG9ydCBTaGlwRmFjdG9yeSBmcm9tICcuLi9TaGlwL1NoaXBGYWN0b3J5JztcbmltcG9ydCB7IEVER0VfU0laRSB9IGZyb20gJy4uLy4uL0NPTlNUQU5UUyc7XG5pbXBvcnQgeyBPdXRPZkJvdW5kc0Vycm9yLCBPdmVybGFwRXJyb3IgfSBmcm9tICcuL0N1c3RvbUVycm9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdhbWVCb2FyZEZhY3RvcnkoKSB7XG4gIGNvbnN0IHBsYWNlZFNoaXBzID0gW107XG4gIGNvbnN0IG1hdHJpY2UgPSBBcnJheTJEKFxuICAgIEVER0VfU0laRSxcbiAgICB7XG4gICAgICBpc1NoaXA6IGZhbHNlLFxuICAgICAgaXNIaXQ6IGZhbHNlLFxuICAgICAgaXNQcmV2aWV3OiBmYWxzZSxcbiAgICB9LFxuICApO1xuICBsZXQgcHJldmlvdXNQcmV2aWV3ZWRDb29yZHMgPSBbXTtcblxuICAvKipcbiAgKiBQcmVwYXJlcyBzaGlwIGNvb3JkaW5hdGVzIGJ5IGNoZWNraW5nIGZvciBib3VuZHMgYW5kIGludGVyc2VjdHNcbiAgKiBUaHJvd3MgZXJyb3Igb24gYm91bmQgb3IgaW50ZXJzZWN0IHZpb2xhdGlvblxuICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgKHgseSkgY29vcmRpbmF0ZXMuXG4gICovXG4gIGNvbnN0IHByZXBhcmVTaGlwQ29vcmRpbmF0ZXMgPSAoeCwgeSwgaXNWZXJ0aWNhbCwgbGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgcHJlcGFyZWRDb29yZHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgeUF4aXM7XG4gICAgICBsZXQgeEF4aXM7XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBjb3JyZWN0IHggYW5kIHkgdmFsdWVzIGJhc2VkIG9uIGlmIHRoZSBzaGlwIGlzIHZlcnRpY2FsIG9yIGhvcml6b250YWxcbiAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgIHlBeGlzID0geSArIGk7XG4gICAgICAgIHhBeGlzID0geDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlBeGlzID0geTtcbiAgICAgICAgeEF4aXMgPSB4ICsgaTtcbiAgICAgIH1cblxuICAgICAgaWYgKHlBeGlzID49IEVER0VfU0laRSB8fCB4QXhpcyA+PSBFREdFX1NJWkUpIHtcbiAgICAgICAgdGhyb3cgbmV3IE91dE9mQm91bmRzRXJyb3IoXCJTaGlwIGRvZXNuJ3QgZml0IHRoZSBnYW1lYm9hcmRcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnJlbnREYXRhT25Db29yZGluYXRlcyA9IG1hdHJpY2UuZ2V0U2luZ2xlVmFsdWUoeEF4aXMsIHlBeGlzKTtcblxuICAgICAgaWYgKGN1cnJlbnREYXRhT25Db29yZGluYXRlcy5pc1NoaXAgIT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBPdmVybGFwRXJyb3IoJ1NoaXAgb3ZlcmxhcHMgYWxyZWFkeSBleGlzdGluZyBzaGlwJyk7XG4gICAgICB9XG5cbiAgICAgIHByZXBhcmVkQ29vcmRzLnB1c2goeyB4QXhpcywgeUF4aXMgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcmVwYXJlZENvb3JkcztcbiAgfTtcblxuICBjb25zdCBjbGVhblByZXZpb3VzU2hpcFByZXZpZXcgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcHJldmlvdXNQcmV2aWV3ZWRDb29yZHMuZm9yRWFjaCgoY29vcmRzKSA9PiB7XG4gICAgICBtYXRyaWNlLndyaXRlU2luZ2xlQ2VsbEtleVBhaXIoXG4gICAgICAgIGNvb3Jkcy54QXhpcyxcbiAgICAgICAgY29vcmRzLnlBeGlzLFxuICAgICAgICAnaXNQcmV2aWV3JyxcbiAgICAgICAgZmFsc2UsXG4gICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHByZXZpZXdTaGlwUGxhY2VtZW50ID0gKHgsIHksIGlzVmVydGljYWwsIGxlbmd0aCkgPT4ge1xuICAgIGNsZWFuUHJldmlvdXNTaGlwUHJldmlldygpO1xuICAgIGNvbnN0IHByZXBhcmVkQ29vcmRzID0gcHJlcGFyZVNoaXBDb29yZGluYXRlcyh4LCB5LCBpc1ZlcnRpY2FsLCBsZW5ndGgpO1xuICAgIHByZXZpb3VzUHJldmlld2VkQ29vcmRzID0gcHJlcGFyZWRDb29yZHM7XG5cbiAgICBwcmVwYXJlZENvb3Jkcy5mb3JFYWNoKChjb29yZHMpID0+IHtcbiAgICAgIG1hdHJpY2Uud3JpdGVTaW5nbGVDZWxsS2V5UGFpcihcbiAgICAgICAgY29vcmRzLnhBeGlzLFxuICAgICAgICBjb29yZHMueUF4aXMsXG4gICAgICAgICdpc1ByZXZpZXcnLFxuICAgICAgICB0cnVlLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBwbGFjZVNoaXAgPSAoeCwgeSwgaXNWZXJ0aWNhbCwgbGVuZ3RoKSA9PiB7XG4gICAgY29uc3Qgc2hpcCA9IFNoaXBGYWN0b3J5KGxlbmd0aCk7XG4gICAgY29uc3QgcHJlcGFyZWRDb29yZHMgPSBwcmVwYXJlU2hpcENvb3JkaW5hdGVzKHgsIHksIGlzVmVydGljYWwsIGxlbmd0aCk7XG5cbiAgICBwcmVwYXJlZENvb3Jkcy5mb3JFYWNoKChjb29yZHMpID0+IHtcbiAgICAgIG1hdHJpY2Uuc2V0U2luZ2xlQ2VsbE9iamVjdChcbiAgICAgICAgY29vcmRzLnhBeGlzLFxuICAgICAgICBjb29yZHMueUF4aXMsXG4gICAgICAgIHtcbiAgICAgICAgICBpc1NoaXA6IHNoaXAsXG4gICAgICAgICAgaXNIaXQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHBsYWNlZFNoaXBzLnB1c2goc2hpcCk7XG4gICAgcmV0dXJuIHNoaXA7XG4gIH07XG5cbiAgY29uc3QgZ2V0UmFuZG9tQ29vcmRzID0gKGlzVmVydGljYWwsIHNoaXBMZW5ndGgpID0+IHtcbiAgICBsZXQgeDtcbiAgICBsZXQgeTtcbiAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChFREdFX1NJWkUgLSBzaGlwTGVuZ3RoKSk7XG4gICAgICB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRURHRV9TSVpFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChFREdFX1NJWkUgLSBzaGlwTGVuZ3RoKSk7XG4gICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRURHRV9TSVpFKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgeCwgeSB9O1xuICB9O1xuXG4gIGNvbnN0IGF1dG9QbGFjZVNoaXBzID0gKHNoaXBMZW5ndGhzKSA9PiB7XG4gICAgc2hpcExlbmd0aHMuZm9yRWFjaCgoc2hpcExlbmd0aCkgPT4ge1xuICAgICAgY29uc3QgcHJlcGFyZUNvb3Jkc0FuZFBsYWNlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gTWF0aC5yYW5kb20oKSA8IDAuNTtcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBnZXRSYW5kb21Db29yZHMoaXNWZXJ0aWNhbCwgc2hpcExlbmd0aCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGxhY2VTaGlwKHgsIHksIGlzVmVydGljYWwsIHNoaXBMZW5ndGgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsZXQgc3RhdHVzO1xuICAgICAgbGV0IG1heFJldHJpZXMgPSAxMDA7XG4gICAgICBkbyB7XG4gICAgICAgIHN0YXR1cyA9IHByZXBhcmVDb29yZHNBbmRQbGFjZSgpO1xuICAgICAgICBtYXhSZXRyaWVzIC09IDE7XG4gICAgICAgIGlmIChtYXhSZXRyaWVzIDw9IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBhdXRvcGxhY2UgeW91ciBzaGlwcyAobWF4IHJldHJpZXMgZXhjZWVkZWQpXCIpO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChzdGF0dXMgPT09ICdlcnJvcicpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoeCwgeSkgPT4ge1xuICAgIGNvbnN0IGNlbGwgPSBtYXRyaWNlLmdldFNpbmdsZVZhbHVlKHgsIHkpO1xuICAgIGxldCBkYXRhID0ge307XG5cbiAgICAvLyB0aHJvdyBlcnJvciBpZiB0aGUgY2VsbCB3YXMgYWxyZWFkeSBoaXRcbiAgICBpZiAoY2VsbC5pc0hpdCA9PT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGl0IHRoZSBzYW1lIHBsYWNlIHR3aWNlJyk7XG4gICAgfVxuXG4gICAgLy8gcmVnaXN0ZXIgYSBzaGlwIGhpdCBpZiB0aGVyZSdzIGEgc2hpcCBvbiB0aGUgY29vcmRzIGFuZCBpcyBub3QgaGl0XG4gICAgaWYgKGNlbGwuaXNTaGlwICE9PSBmYWxzZSAmJiBjZWxsLmlzSGl0ID09PSBmYWxzZSkge1xuICAgICAgY2VsbC5pc1NoaXAuaGl0KCk7XG4gICAgICBkYXRhID0ge1xuICAgICAgICBpc1NoaXA6IGNlbGwuaXNTaGlwLFxuICAgICAgICBpc0hpdDogdHJ1ZSxcbiAgICAgICAgaXNTdW5rOiBjZWxsLmlzU2hpcC5pc1N1bmsoKSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gcmVnaXN0ZXIgYSBtaXNzZWQgaGl0XG4gICAgaWYgKGNlbGwuaXNTaGlwID09PSBmYWxzZSAmJiBjZWxsLmlzSGl0ID09PSBmYWxzZSkge1xuICAgICAgZGF0YSA9IHtcbiAgICAgICAgaXNTaGlwOiBmYWxzZSxcbiAgICAgICAgaXNIaXQ6IHRydWUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIG1hdHJpY2Uuc2V0U2luZ2xlQ2VsbE9iamVjdCh4LCB5LCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBjb25zdCBhcmVBbGxTaGlwc1N1bmsgPSAoKSA9PiBwbGFjZWRTaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSk7XG5cbiAgY29uc3QgZ2V0U3Vua1NoaXBzID0gKCkgPT4gcGxhY2VkU2hpcHMuZmlsdGVyKChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKTtcblxuICBjb25zdCBnZXRBcnJheSA9ICgpID0+IG1hdHJpY2UuZ2V0QXJyYXkoKTtcblxuICByZXR1cm4ge1xuICAgIHBsYWNlU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIGFyZUFsbFNoaXBzU3VuayxcbiAgICBnZXRBcnJheSxcbiAgICBhdXRvUGxhY2VTaGlwcyxcbiAgICBnZXRTdW5rU2hpcHMsXG4gICAgcHJldmlld1NoaXBQbGFjZW1lbnQsXG4gICAgY2xlYW5QcmV2aW91c1NoaXBQcmV2aWV3LFxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJyYXkyRChzaXplLCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3QgbWF0cmljZSA9IFtdO1xuXG4gIGNvbnN0IGluaXRpYWxpemUgPSAoKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICAgIG1hdHJpY2UucHVzaChuZXcgQXJyYXkoc2l6ZSkuZmlsbChkZWZhdWx0VmFsdWUpKTtcbiAgICB9XG4gIH07XG5cbiAgaW5pdGlhbGl6ZSgpO1xuXG4gIGNvbnN0IHNldFNpbmdsZUNlbGxPYmplY3QgPSAoeCwgeSwgc3RhdGUpID0+IHtcbiAgICBpZiAoeCA8IHNpemUgJiYgeSA8IHNpemUpIHtcbiAgICAgIG1hdHJpY2VbeV1beF0gPSBzdGF0ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nvb3JkaW5hdGVzIG91dCBvZiBib3VuZHMnKTtcbiAgfTtcblxuICBjb25zdCBnZXRBcnJheSA9ICgpID0+IG1hdHJpY2U7XG5cbiAgY29uc3Qgd3JpdGVTaW5nbGVDZWxsT2JqZWN0VmFsdWUgPSAoeCwgeSwga2V5LCB2YWx1ZSkgPT4ge1xuICAgIGlmICh4IDwgc2l6ZSAmJiB5IDwgc2l6ZSkge1xuICAgICAgY29uc3Qgb2JqID0gbWF0cmljZVt5XVt4XTtcbiAgICAgIGNvbnN0IG5ld09iaiA9IHsgLi4ub2JqIH07XG4gICAgICBuZXdPYmpba2V5XSA9IHZhbHVlO1xuICAgICAgbWF0cmljZVt5XVt4XSA9IG5ld09iajtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0U2luZ2xlVmFsdWUgPSAoeCwgeSkgPT4ge1xuICAgIGlmICh4IDwgc2l6ZSAmJiB5IDwgc2l6ZSkge1xuICAgICAgcmV0dXJuIG1hdHJpY2VbeV1beF07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ29vcmRpbmF0ZXMgb3V0IG9mIGJvdW5kcycpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0U2luZ2xlQ2VsbE9iamVjdCxcbiAgICBnZXRBcnJheSxcbiAgICBnZXRTaW5nbGVWYWx1ZSxcbiAgICB3cml0ZVNpbmdsZUNlbGxLZXlQYWlyOiB3cml0ZVNpbmdsZUNlbGxPYmplY3RWYWx1ZSxcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNoaXBGYWN0b3J5KGxlbmd0aCkge1xuICBsZXQgbnVtYmVyT2ZIaXRzID0gMDtcblxuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgbnVtYmVyT2ZIaXRzICs9IDE7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gKG51bWJlck9mSGl0cyA9PT0gbGVuZ3RoKTtcblxuICBjb25zdCBnZXRMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG5cbiAgcmV0dXJuIHsgaGl0LCBpc1N1bmssIGdldExlbmd0aCB9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbmltcG9ydCBET01tYW5hZ2VyIGZyb20gJy4vZG9tL0RPTW1hbmFnZXInO1xuaW1wb3J0IFBsYXllckZhY3RvcnkgZnJvbSAnLi9tb2R1bGVzL1BsYXllci9QbGF5ZXJGYWN0b3J5JztcbmltcG9ydCB7IEFJX0RFTEFZLCBTSElQX0xFTkdUSFMgfSBmcm9tICcuL0NPTlNUQU5UUyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnYW1lTG9vcChsYXN0VXNlZE5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRTaGlwSUQgPSAwO1xuICAgIGNvbnN0IHBsYXllciA9IFBsYXllckZhY3RvcnkoJ3BsYWNlaG9sZGVyJyk7XG4gICAgY29uc3QgZW5lbXkgPSBQbGF5ZXJGYWN0b3J5KCdDb21wdXRlcicpO1xuICAgIGNvbnN0IHBsYXllckJvYXJkID0gcGxheWVyLmdldEJvYXJkKCk7XG4gICAgY29uc3QgZW5lbXlCb2FyZCA9IGVuZW15LmdldEJvYXJkKCk7XG4gICAgY29uc3QgZGlzcGxheU1hbmFnZXIgPSBET01tYW5hZ2VyKFxuICAgICAgcGxheWVyQm9hcmQsXG4gICAgICBlbmVteUJvYXJkLFxuICAgICAgaGFuZGxlRW5lbXlDZWxsQ2xpY2ssXG4gICAgICBoYW5kbGVQbGF5ZXJDZWxsQ2xpY2ssXG4gICAgICBoYW5kbGVQbGF5ZXJDZWxsSG92ZXIsXG4gICAgICByb3RhdGVIYW5kbGVyLFxuICAgICAgZ2V0Q3VycmVudFNoaXBJRCxcbiAgICApO1xuXG4gICAgbGV0IGxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQgPSBmYWxzZTtcbiAgICBsZXQgbmV4dFBsYXllciA9ICdwbGF5ZXInO1xuICAgIGxldCBwbGFjaW5nU2hpcHMgPSB0cnVlO1xuICAgIGxldCBpc1NoaXBWZXJ0aWNhbCA9IGZhbHNlO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gcGxheWVyTmFtZU1vZGFsKCkge1xuICAgICAgY29uc3QgcGxheWVyTmFtZSA9IGF3YWl0IGdldFBsYXllck5hbWUoKTtcbiAgICAgIHBsYXllci5zZXROYW1lKHBsYXllck5hbWUpO1xuICAgICAgZGlzcGxheU1hbmFnZXIuc2V0UGxheWVyTmFtZShwbGF5ZXJOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoIWxhc3RVc2VkTmFtZSkge1xuICAgICAgcGxheWVyTmFtZU1vZGFsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsYXllci5zZXROYW1lKGxhc3RVc2VkTmFtZSk7XG4gICAgICBkaXNwbGF5TWFuYWdlci5zZXRQbGF5ZXJOYW1lKGxhc3RVc2VkTmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlSGFuZGxlcigpIHtcbiAgICAgIGlzU2hpcFZlcnRpY2FsID0gIWlzU2hpcFZlcnRpY2FsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRTaGlwSUQoKSB7XG4gICAgICByZXR1cm4gY3VycmVudFNoaXBJRDtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBnZXRQbGF5ZXJOYW1lKCkge1xuICAgICAgY29uc3QgbmFtZSA9IGF3YWl0IGRpc3BsYXlNYW5hZ2VyLnNob3dOYW1lTW9kYWwoKTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGNoZWNrV2lubmVyKCkge1xuICAgICAgaWYgKHBsYXllckJvYXJkLmFyZUFsbFNoaXBzU3VuaygpID09PSB0cnVlKSB7XG4gICAgICAgIGF3YWl0IGRpc3BsYXlNYW5hZ2VyLmhhbmRsZVdpbihlbmVteS5nZXROYW1lKCkpO1xuICAgICAgICByZXNvbHZlKHBsYXllci5nZXROYW1lKCkpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZW15Qm9hcmQuYXJlQWxsU2hpcHNTdW5rKCkgPT09IHRydWUpIHtcbiAgICAgICAgYXdhaXQgZGlzcGxheU1hbmFnZXIuaGFuZGxlV2luKHBsYXllci5nZXROYW1lKCkpO1xuICAgICAgICByZXNvbHZlKHBsYXllci5nZXROYW1lKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBsYXllclR1cm4gPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgYXR0YWNrRGF0YSA9IGF3YWl0IHBsYXllci5hdHRhY2soZGF0YS54LCBkYXRhLnksIGVuZW15KTtcbiAgICAgIGNoZWNrV2lubmVyKCk7XG4gICAgICBkaXNwbGF5TWFuYWdlci5yZW5kZXJCb2FyZHMoKTtcbiAgICAgIGlmIChhdHRhY2tEYXRhPy5pc1N1bmsgPT09IHRydWUpIHtcbiAgICAgICAgZGlzcGxheU1hbmFnZXIuYXBwZW5kRGVzdHJveWVkU2hpcChhdHRhY2tEYXRhLmlzU2hpcCwgJ2VuZW15Jyk7XG4gICAgICB9XG4gICAgICBpZiAoYXR0YWNrRGF0YT8uaXNTaGlwICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gJ3BsYXllcic7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ2NvbXB1dGVyJztcbiAgICB9O1xuXG4gICAgY29uc3QgY29tcHV0ZXJUdXJuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZW5lbXlBdHRhY2tEYXRhID0gYXdhaXQgZW5lbXkuZGVsYXllZFJhbmRvbUF0dGFjayhBSV9ERUxBWSwgcGxheWVyKTtcbiAgICAgIGNoZWNrV2lubmVyKCk7XG4gICAgICBkaXNwbGF5TWFuYWdlci5yZW5kZXJCb2FyZHMoKTtcblxuICAgICAgaWYgKGVuZW15QXR0YWNrRGF0YT8uaXNTdW5rID09PSB0cnVlKSB7XG4gICAgICAgIGRpc3BsYXlNYW5hZ2VyLmFwcGVuZERlc3Ryb3llZFNoaXAoZW5lbXlBdHRhY2tEYXRhLmlzU2hpcCwgJ3BsYXllcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5lbXlBdHRhY2tEYXRhPy5pc1NoaXAgIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAnY29tcHV0ZXInO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdwbGF5ZXInO1xuICAgIH07XG5cbiAgICBjb25zdCBvbmVHYW1lVHVybiA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAobGlzdGVuRm9yQ2xpY2tzRW5lbXlCb2FyZCAmJiAobmV4dFBsYXllciA9PT0gJ3BsYXllcicpKSB7XG4gICAgICAgICAgbmV4dFBsYXllciA9IGF3YWl0IHBsYXllclR1cm4oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRQbGF5ZXIgPT09ICdjb21wdXRlcicpIHtcbiAgICAgICAgICBsaXN0ZW5Gb3JDbGlja3NFbmVteUJvYXJkID0gZmFsc2U7XG4gICAgICAgICAgbmV4dFBsYXllciA9IGF3YWl0IGNvbXB1dGVyVHVybigpO1xuICAgICAgICAgIGlmIChuZXh0UGxheWVyID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBvbmVHYW1lVHVybignJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBpZ25vcmUgZXJyb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHByZXZEYXRhO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVBsYXllckNlbGxIb3ZlcihkYXRhKSB7XG4gICAgICBpZiAocGxhY2luZ1NoaXBzKSB7XG4gICAgICAgIGlmIChwcmV2RGF0YT8ueCAhPT0gZGF0YS54IHx8IHByZXZEYXRhPy55ICE9PSBkYXRhLnkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGxheWVyQm9hcmQucHJldmlld1NoaXBQbGFjZW1lbnQoXG4gICAgICAgICAgICAgIE51bWJlcihkYXRhLngpLFxuICAgICAgICAgICAgICBOdW1iZXIoZGF0YS55KSxcbiAgICAgICAgICAgICAgaXNTaGlwVmVydGljYWwsXG4gICAgICAgICAgICAgIFNISVBfTEVOR1RIU1tjdXJyZW50U2hpcElEXSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBkaXNwbGF5TWFuYWdlci5yZW5kZXJCb2FyZHMoKTtcbiAgICAgICAgICAgIHByZXZEYXRhID0geyAuLi5kYXRhIH07XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVBsYXllckNlbGxDbGljayhkYXRhKSB7XG4gICAgICBpZiAocGxhY2luZ1NoaXBzKSB7XG4gICAgICAgIGlmIChjdXJyZW50U2hpcElEIDwgU0hJUF9MRU5HVEhTLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoXG4gICAgICAgICAgICAgIE51bWJlcihkYXRhLngpLFxuICAgICAgICAgICAgICBOdW1iZXIoZGF0YS55KSxcbiAgICAgICAgICAgICAgaXNTaGlwVmVydGljYWwsXG4gICAgICAgICAgICAgIFNISVBfTEVOR1RIU1tjdXJyZW50U2hpcElEXSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjdXJyZW50U2hpcElEICs9IDE7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnT3V0T2ZCb3VuZHNFcnJvcicgfHwgZXJyb3IubmFtZSA9PT0gJ092ZXJsYXBFcnJvcicpIHtcbiAgICAgICAgICAgICAgLy8gZG8gbm90aGluZywgaWdub3JlIHRob3NlIGVycm9yc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFNoaXBJRCA9PT0gU0hJUF9MRU5HVEhTLmxlbmd0aCkge1xuICAgICAgICAgIHBsYWNpbmdTaGlwcyA9IGZhbHNlO1xuICAgICAgICAgIGN1cnJlbnRTaGlwSUQgPSAwO1xuICAgICAgICAgIGxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQgPSB0cnVlO1xuICAgICAgICAgIGF3YWl0IHBsYXllckJvYXJkLmNsZWFuUHJldmlvdXNTaGlwUHJldmlldygpO1xuICAgICAgICAgIGRpc3BsYXlNYW5hZ2VyLnN3aXRjaFRvRW5lbXlCb2FyZCgpO1xuICAgICAgICAgIGRpc3BsYXlNYW5hZ2VyLnJlbmRlckJvYXJkcygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRW5lbXlDZWxsQ2xpY2soZGF0YSkge1xuICAgICAgaWYgKGxpc3RlbkZvckNsaWNrc0VuZW15Qm9hcmQpIHtcbiAgICAgICAgb25lR2FtZVR1cm4oZGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZW5lbXlCb2FyZC5hdXRvUGxhY2VTaGlwcyhTSElQX0xFTkdUSFMpO1xuICAgIGRpc3BsYXlNYW5hZ2VyLnJlbmRlckJvYXJkcygpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcGxheSgpIHtcbiAgbGV0IGxhc3RVc2VkTmFtZTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBlbmRsZXNzIGdhbWVwbGF5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICBsYXN0VXNlZE5hbWUgPSBhd2FpdCBnYW1lTG9vcChsYXN0VXNlZE5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCBwbGF5IGZyb20gJy4vZ2FtZSc7XG5cbnBsYXkoKTtcbiJdLCJuYW1lcyI6WyJydW50aW1lIiwiZXhwb3J0cyIsInVuZGVmaW5lZCIsIk9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIm9iaiIsImtleSIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsImRvbmUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwiY2FsbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsInRoaXMiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiaSIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJtb2R1bGUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJCb2FyZCIsImJvYXJkRGF0YSIsImhhbmRsZUNlbGxDbGljayIsImhhbmRsZUNlbGxIb3ZlciIsImJvYXJkV3JhcHBlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImJvYXJkIiwiYm9hcmRIZWFkaW5nIiwidGV4dENvbnRlbnQiLCJhcHBlbmQiLCJnZXRCb2FyZERpdiIsInJlbmRlciIsImFycmF5Iiwicm93RGF0YSIsInkiLCJjZWxsRGF0YSIsIngiLCJjdXJyZW50Q2VsbCIsImNlbGxFbCIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNTaGlwIiwiaXNQcmV2aWV3IiwiaXNIaXQiLCJpc1N1bmsiLCJhcHBlbmRDaGlsZCIsImNsZWFuIiwic2V0TmFtZSIsImNoYW5nZUhlYWRpbmdOYW1lIiwiRGVzdHJveWVkU2hpcHMiLCJ3cmFwcGVyIiwidGl0bGUiLCJpbml0aWFsaXplIiwiYXBwZW5kU2hpcCIsInNoaXAiLCJzaGlwRWxlbWVudCIsImdldExlbmd0aCIsImNlbGwiLCJnZXRFbGVtZW50IiwibW9kYWwiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJhZGRDbG9zZUljb24iLCJjbG9zZUljb24iLCJpbm5lckhUTUwiLCJzaG93T3duUHJvbWlzZSIsImVsZW1lbnQiLCJzaG93IiwiY2xlYW5Nb2RhbCIsInJlbW92ZSIsImlubmVyVGV4dCIsImlucHV0Iiwic2V0QXR0cmlidXRlIiwibGFiZWwiLCJoYW5kbGVTdWJtaXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY2hlY2tWYWxpZGl0eSIsInN0eWxlIiwiZGlzcGxheSIsInBsYWNlaG9sZGVyIiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwidGFyZ2V0IiwiYnV0dG9uIiwiaW5wdXRCdXR0b25XcmFwcGVyIiwiU0hJUF9MRU5HVEhTIiwiRURHRV9TSVpFIiwiYW5ub3VuY2VtZW50IiwiRE9NbWFuYWdlciIsInBsYXllckJvYXJkIiwiZW5lbXlCb2FyZCIsImhhbmRsZUVuZW15Q2VsbENsaWNrIiwiaGFuZGxlUGxheWVyQ2VsbENsaWNrIiwiaGFuZGxlUGxheWVyQ2VsbEhvdmVyIiwicm90YXRlSGFuZGxlciIsImdldEN1cnJlbnRTaGlwSUQiLCJzaG93aW5nTW9kYWwiLCJnYW1lYXJlYSIsInBsYXllckRlc3Ryb3llZFNoaXBzRE9NIiwiZW5lbXlEZXN0cm95ZWRTaGlwc0RPTSIsInNoaXBQaWNrZXJCb2FyZCIsImlzVmVydGljYWwiLCJib2FyZFdyYXAiLCJpZCIsInNoaXBQaWNrZXIiLCJhcnJvd0xlZnQiLCJjdXJyZW50U2hpcFdyYXAiLCJnZXRDdXJyZW50U2hpcERPTSIsImN1cnJlbnRTaGlwTGVuZ3RoIiwiY3VycmVudFNoaXAiLCJnZXRCb2FyZFdyYXAiLCJkaXNwbGF5Q3VycmVudFNoaXAiLCJTaGlwUGlja2VyQm9hcmQiLCJib2FyZHNXcmFwcGVyIiwicGxheWVyQm9hcmRET00iLCJlbmVteUJvYXJkRE9NIiwicGxheWVyRGVzdHJveWVkU2hpcHMiLCJlbmVteURlc3Ryb3llZFNoaXBzIiwicmVuZGVyQm9hcmRzIiwiZ2V0QXJyYXkiLCJhcHBlbmREZXN0cm95ZWRTaGlwIiwicGxheWVyIiwiaGFuZGxlV2luIiwic2hvd05hbWVNb2RhbCIsInN3aXRjaFRvRW5lbXlCb2FyZCIsImdldEVsZW1lbnRCeUlkIiwic2V0UGxheWVyTmFtZSIsIk92ZXJsYXBFcnJvciIsIm1lc3NhZ2UiLCJzdXBlciIsIk91dE9mQm91bmRzRXJyb3IiLCJQbGF5ZXJGYWN0b3J5IiwicGxheWVyTmFtZSIsInBsYWNlZFNoaXBzIiwibWF0cmljZSIsInNpemUiLCJkZWZhdWx0VmFsdWUiLCJBcnJheSIsImZpbGwiLCJzZXRTaW5nbGVDZWxsT2JqZWN0IiwiZ2V0U2luZ2xlVmFsdWUiLCJ3cml0ZVNpbmdsZUNlbGxLZXlQYWlyIiwibmV3T2JqIiwiQXJyYXkyRCIsInByZXZpb3VzUHJldmlld2VkQ29vcmRzIiwicHJlcGFyZVNoaXBDb29yZGluYXRlcyIsInByZXBhcmVkQ29vcmRzIiwieUF4aXMiLCJ4QXhpcyIsImNsZWFuUHJldmlvdXNTaGlwUHJldmlldyIsImNvb3JkcyIsInBsYWNlU2hpcCIsIm51bWJlck9mSGl0cyIsImhpdCIsIlNoaXBGYWN0b3J5IiwicmVjZWl2ZUF0dGFjayIsImRhdGEiLCJhcmVBbGxTaGlwc1N1bmsiLCJldmVyeSIsImF1dG9QbGFjZVNoaXBzIiwic2hpcExlbmd0aHMiLCJzaGlwTGVuZ3RoIiwicHJlcGFyZUNvb3Jkc0FuZFBsYWNlIiwiTWF0aCIsInJhbmRvbSIsImZsb29yIiwiZ2V0UmFuZG9tQ29vcmRzIiwic3RhdHVzIiwibWF4UmV0cmllcyIsImdldFN1bmtTaGlwcyIsImZpbHRlciIsInByZXZpZXdTaGlwUGxhY2VtZW50IiwiR2FtZUJvYXJkRmFjdG9yeSIsImFycmF5T2ZIaXRzIiwiYXR0YWNrIiwiZW5lbXlQbGF5ZXIiLCJnZXRCb2FyZCIsImF0dGFja1JhbmRvbVBvc2l0aW9uIiwicmFuZG9tU2luZ2xlQ29vcmQiLCJnZXRVbmlxdWVDb29yZHMiLCJzb21lIiwiZWwiLCJ1bmlxdWVDb29yZHMiLCJnZXROYW1lIiwibmV3TmFtZSIsImRlbGF5ZWRSYW5kb21BdHRhY2siLCJkZWxheSIsIm1zIiwicmVzIiwic2V0VGltZW91dCIsImdhbWVMb29wIiwibGFzdFVzZWROYW1lIiwiY3VycmVudFNoaXBJRCIsImVuZW15IiwiZGlzcGxheU1hbmFnZXIiLCJsaXN0ZW5Gb3JDbGlja3NFbmVteUJvYXJkIiwib25lR2FtZVR1cm4iLCJwbGFjaW5nU2hpcHMiLCJOdW1iZXIiLCJpc1NoaXBWZXJ0aWNhbCIsInByZXZEYXRhIiwibmV4dFBsYXllciIsImNoZWNrV2lubmVyIiwiZ2V0UGxheWVyTmFtZSIsInBsYXllck5hbWVNb2RhbCIsImF0dGFja0RhdGEiLCJwbGF5ZXJUdXJuIiwiZW5lbXlBdHRhY2tEYXRhIiwiY29tcHV0ZXJUdXJuIiwicGxheSJdLCJzb3VyY2VSb290IjoiIn0=